<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1.两数之和</title>
      <link href="/2023/01/22/1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/01/22/1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h2><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p></blockquote><h3 id="原题链接：1-两数之和-力扣（LeetCode）"><a href="#原题链接：1-两数之和-力扣（LeetCode）" class="headerlink" title="原题链接：1. 两数之和 - 力扣（LeetCode）"></a>原题链接：<a href="https://leetcode.cn/problems/two-sum/">1. 两数之和 - 力扣（LeetCode）</a></h3><h2 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h2><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h3><pre class=" language-bash"><code class="language-bash">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span>2,7,11,15<span class="token punctuation">]</span>, target <span class="token operator">=</span> 9输出：<span class="token punctuation">[</span>0,1<span class="token punctuation">]</span>解释：因为 nums<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + nums<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">==</span> 9 ，返回 <span class="token punctuation">[</span>0, 1<span class="token punctuation">]</span> 。</code></pre><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h3><pre class=" language-bash"><code class="language-bash">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span>3,2,4<span class="token punctuation">]</span>, target <span class="token operator">=</span> 6输出：<span class="token punctuation">[</span>1,2<span class="token punctuation">]</span></code></pre><h3 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h3><pre class=" language-bash"><code class="language-bash">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span>3,3<span class="token punctuation">]</span>, target <span class="token operator">=</span> 6输出：<span class="token punctuation">[</span>0,1<span class="token punctuation">]</span></code></pre><h2 id="三、解法"><a href="#三、解法" class="headerlink" title="三、解法"></a>三、解法</h2><h3 id="3-1-暴力解法"><a href="#3-1-暴力解法" class="headerlink" title="3.1 暴力解法"></a>3.1 暴力解法</h3><h4 id="3-1-1-思路"><a href="#3-1-1-思路" class="headerlink" title="3.1.1 思路"></a>3.1.1 思路</h4><p>对每一个值都去寻找，这个值后面 是否有一个数 与之相加等于target。</p><p>使用两个for循环完成。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-1-2-提交结果"><a href="#3-1-2-提交结果" class="headerlink" title="3.1.2 提交结果"></a>3.1.2 提交结果</h4><p><a href="https://www.helloimg.com/image/oRisLC"><img src="https://www.helloimg.com/images/2023/01/22/oRisLC.png" alt="提交结果"></a></p><h3 id="3-2-使用hash表"><a href="#3-2-使用hash表" class="headerlink" title="3.2 使用hash表"></a>3.2 使用hash表</h3><h4 id="3-2-1-思路"><a href="#3-2-1-思路" class="headerlink" title="3.2.1 思路"></a>3.2.1 思路</h4><p>hash表的查询和插入操作都是O(1)。在数组中找两个数相加等于target，可以转变为在数组中查找一个值等于target-当前值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sum<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-2-提交结果"><a href="#3-2-2-提交结果" class="headerlink" title="3.2.2 提交结果"></a>3.2.2 提交结果</h4><p><a href="https://www.helloimg.com/image/oRitNQ"><img src="https://www.helloimg.com/images/2023/01/22/oRitNQ.png" alt="提交结果"></a></p><blockquote><p>ps：估计以后每天写两道题以上，用这种方式来记录刷题过程，现在好久没写博客了，不知道写些啥，个人认为以后会好起来。大方向是类似于题解，但不会很像。估计会刷几百道吧，如果后期博客界面全是leetcode，会考虑重新部署博客，不使用hexo。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章、概论</title>
      <link href="/2023/01/22/%E7%AC%AC%E4%B8%80%E7%AB%A0_%E6%A6%82%E8%AE%BA/"/>
      <url>/2023/01/22/%E7%AC%AC%E4%B8%80%E7%AB%A0_%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-因特网概述"><a href="#一、-因特网概述" class="headerlink" title="一、 因特网概述"></a>一、 因特网概述</h2><h3 id="1-1-网络、互连网（互联网）和因特网"><a href="#1-1-网络、互连网（互联网）和因特网" class="headerlink" title="1.1 网络、互连网（互联网）和因特网"></a>1.1 网络、互连网（互联网）和因特网</h3><ul><li>网络由若干<strong>结点</strong>和连接这些结点的<strong>链路</strong>组成。</li><li>多个网络还可以通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互联网。因此，互联网是“<strong>网络中的网络</strong>”。</li><li>因特网是世界上最大的互连网络。</li></ul><blockquote><p>internet与Internet的区别</p><p>internet（互联网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。在这些网络之间的通信协议可以是任意的。</p><p>Internet（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络互相连接而成的特定计算机网络，它采用TCP/IP协议簇作为通信的规则，其前身是美国的ARPANET</p></blockquote><h3 id="1-2-因特网发展的三个阶段"><a href="#1-2-因特网发展的三个阶段" class="headerlink" title="1.2 因特网发展的三个阶段"></a>1.2 因特网发展的三个阶段</h3><p>1969年，从单个网络ARPANET向互联网发展；</p><p>1985年，逐步建成三级结构的因特网；</p><p>1993年，逐步形成了多层次ISP结构的因特网。</p><h3 id="1-3-因特网的标准化工作"><a href="#1-3-因特网的标准化工作" class="headerlink" title="1.3 因特网的标准化工作"></a>1.3 因特网的标准化工作</h3><p>1、因特网的标准化工作对因特网的发展起到了非常重要的作用。</p><p>2、因特网在制定其标准上的一个很大的特点就是<strong>面向公众</strong>。</p><p>3、因特网协会ISOC是一个国际性组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用。</p><blockquote><p>因特网体系结构委员会IAB，负责管理因特网有关协议的开发；</p><p>因特网工程部IETF，负责管理因特网有关协议的开发；</p><p>因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题。</p></blockquote><p>4、制定因特网的正式标准要经过一下4个阶段：</p><ol><li>因特网草案（在这个阶段还不是RFC文档）</li><li>建议标准（从这个阶段开始就成为RFC文档）</li><li>草案标准</li><li>因特网标准</li></ol><h2 id="二、-因特网的组成"><a href="#二、-因特网的组成" class="headerlink" title="二、 因特网的组成"></a>二、 因特网的组成</h2><ul><li>边缘部分：由所有连接在因特网上的<strong>主机</strong>组成。这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>（传送数据、音频或视频）和<strong>资源共享</strong>。</li><li>核心部分：由<strong>大量网络</strong>和连接这些网络的路由器组成。这部分是<strong>为边缘部分提供服务</strong>的（提供连通性和交换）。</li></ul><h2 id="三、三种交换方式"><a href="#三、三种交换方式" class="headerlink" title="三、三种交换方式"></a>三、三种交换方式</h2><h3 id="3-1-电路交换"><a href="#3-1-电路交换" class="headerlink" title="3.1 电路交换"></a>3.1 电路交换</h3><ul><li>电话交换机接通电话线的方式称为电路交换；</li><li>从通信资源的分配角度来看，交换（Switching）就是按照某种方式动态地分配传输线路的资源；</li><li>电路交换的三个步骤：<ol><li>建立连接（分配通信资源）</li><li>通话（一直占用通信资源）</li><li>释放连接（归还通信资源）</li></ol></li></ul><h3 id="3-2-分组交换"><a href="#3-2-分组交换" class="headerlink" title="3.2 分组交换"></a>3.2 分组交换</h3><p>发送方：完成构造分组和发生分组</p><p>路由器：完成缓存分组和转发分组</p><p>接收方：完成接收分组和还原报文</p><h3 id="3-3-报文交换"><a href="#3-3-报文交换" class="headerlink" title="3.3 报文交换"></a>3.3 报文交换</h3><h3 id="3-4-三种交换方式的对比"><a href="#3-4-三种交换方式的对比" class="headerlink" title="3.4 三种交换方式的对比"></a>3.4 三种交换方式的对比</h3><p><a href="https://www.helloimg.com/image/oRi4ut"><img src="https://www.helloimg.com/images/2023/01/22/oRi4ut.png" alt="三种交换方式对比"></a></p><h3 id="3-5-优缺点对比"><a href="#3-5-优缺点对比" class="headerlink" title="3.5 优缺点对比"></a>3.5 优缺点对比</h3><h4 id="3-5-1-电路交换"><a href="#3-5-1-电路交换" class="headerlink" title="3.5.1 电路交换"></a>3.5.1 电路交换</h4><ul><li><p>优点：</p><p>1）通信时延小</p><p>2）有序传输</p><p>3）没有冲突</p><p>4）适用范围广</p><p>5）实时性强</p><p>6）控制简单</p></li><li><p>缺点：</p><p>1）建立连接时间长</p><p>2）线路独占，使用效率低</p><p>3）灵活性差</p><p>4）难以规格化</p></li></ul><h4 id="3-5-2-报文交换"><a href="#3-5-2-报文交换" class="headerlink" title="3.5.2 报文交换"></a>3.5.2 报文交换</h4><ul><li><p>优点：</p><p>1）无需建立连接</p><p>2）动态分配线路</p><p>3）提高线路可靠性</p><p>4）提高线路利用率</p><p>5）提供多目标服务</p></li><li><p>缺点：</p><p>1）引发了转发时延</p><p>2）需要较大存储空间</p><p>3）需要传输额外的信息量</p></li></ul><h4 id="3-5-3-分组交换"><a href="#3-5-3-分组交换" class="headerlink" title="3.5.3 分组交换"></a>3.5.3 分组交换</h4><ul><li><p>优点：</p><p>1）无需建立连接</p><p>2）线路利用率高</p><p>3）简化了存储管理</p><p>4）加速传输</p><p>5）减少出错概率和重发数据量</p></li><li><p>缺点：</p><p>1）引起了转发时延</p><p>2）需要传输额外的信息量</p><p>3）对于数据报服务，存在失序、丢失或重复分组的问题；对于虚电路服务，存在呼叫建立、数据传输和虚电路释放三个过程</p></li></ul><h2 id="四、计算机网络的定义和分类"><a href="#四、计算机网络的定义和分类" class="headerlink" title="四、计算机网络的定义和分类"></a>四、计算机网络的定义和分类</h2><h3 id="4-1-计算机网络的定义"><a href="#4-1-计算机网络的定义" class="headerlink" title="4.1 计算机网络的定义"></a>4.1 计算机网络的定义</h3><ul><li><p>计算机网络的精确定义并未统一</p></li><li><p>计算机网络的最简单的定义是：一些<strong>互相连接</strong>的、<strong>自治</strong>的计算机的<strong>集合</strong></p><blockquote><p>互连：是指计算机之间可以通过有线或无线的方式进行数据通信；</p><p>自治：是指独立的计算机，它有自己的硬件和软件，可以单独运行使用；</p><p>集合：是指至少需要两台计算机。</p></blockquote></li><li><p>计算机网络的较好的定义是：计算机网络主要是由一些<strong>通用的、可编程的硬件互连</strong>而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。</p><blockquote><p>计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。</p><p>计算机网络并非专门用来传输数据，而是能够支持很多种应用（包括今后可能出现的各种应用）。</p></blockquote></li></ul><h3 id="4-2-计算机网络的分类"><a href="#4-2-计算机网络的分类" class="headerlink" title="4.2 计算机网络的分类"></a>4.2 计算机网络的分类</h3><ol><li>按交换技术分类：<ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul></li><li>按使用者分类：<ul><li>公用网</li><li>专用网</li></ul></li><li>按传输介质分类：<ul><li>有线网络</li><li>无线网络</li></ul></li><li>按覆盖范围分类：<ul><li>广域网WAN</li><li>城域网MAN</li><li>局域网LAN</li><li>个域网PAN</li></ul></li><li>按拓扑结构分类：<ul><li>总线型网络</li><li>星型网络</li><li>环形网络</li><li>网状型网络</li></ul></li></ol><h2 id="五、计算机网络的性能指标"><a href="#五、计算机网络的性能指标" class="headerlink" title="五、计算机网络的性能指标"></a>五、计算机网络的性能指标</h2><h3 id="5-1-速率"><a href="#5-1-速率" class="headerlink" title="5.1 速率"></a>5.1 速率</h3><ul><li>比特：计算机中数据量的单位，也是信息论中信息量的单位。一个比特就是二进制数字中的一个1或0。</li><li>连接在计算机网络上的主机在数字信道上传送比特的速率，也称<strong>比特率</strong>或数据率。</li></ul><h3 id="5-2-带宽"><a href="#5-2-带宽" class="headerlink" title="5.2 带宽"></a>5.2 带宽</h3><p>用来表示网络的通信线路所能传送数据的能力，因此网络带宽表示在单位时间内从网络中某一点到另一点所能通过的“<strong>最高数据率</strong>”；单位与速率单位相同。</p><h3 id="5-3-吞吐量"><a href="#5-3-吞吐量" class="headerlink" title="5.3 吞吐量"></a>5.3 吞吐量</h3><ul><li>吞吐量表示在<strong>单位时间内通过某个网络（或信道、接口）的数据量</strong>；</li><li>吞吐量被经常用于现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络；</li><li>吞吐量<strong>受网络的带宽或额定数速率的限制</strong>。</li></ul><h3 id="5-4-时延"><a href="#5-4-时延" class="headerlink" title="5.4 时延"></a>5.4 时延</h3><ul><li><p>发送时延 = 分组长度（b）÷ 发送速率（b/s） </p></li><li><p>传播时延 = 信道长度（m）÷ 电磁波传播速率（m/s）</p></li><li><p>处理时延            一般不便于计算 </p><blockquote><p>常见介质中电磁波的传播速率（m/s）</p><p>自由空间：3 × 10^8^</p><p>铜线：2.3 × 10^8^</p><p>光纤：2.0 × 10^8^</p></blockquote></li></ul><h3 id="5-5-时延带宽积"><a href="#5-5-时延带宽积" class="headerlink" title="5.5 时延带宽积"></a>5.5 时延带宽积</h3><ul><li>时延带宽积 = 传播时延 × 带宽</li><li>若发送端连续发送数据，则在所发送的第一个比特即将到达终点时，发送端就已经发送了时延带宽积个比特。</li><li>链路的时延带宽积又称为以<strong>比特为单位的链路长度</strong>。</li></ul><h3 id="5-6-往返时间RTT"><a href="#5-6-往返时间RTT" class="headerlink" title="5.6 往返时间RTT"></a>5.6 往返时间RTT</h3><ul><li>在许多情况下，因特网上的信息不仅仅单方向传输，而是<strong>双向交互</strong>；</li><li>我们有时很需要知道双向交互一次所需的时间。</li></ul><h3 id="5-7-利用率"><a href="#5-7-利用率" class="headerlink" title="5.7 利用率"></a>5.7 利用率</h3><ul><li>信道利用率：用来表示某信道由百分之几的时间是被利用的（有数据通过）；</li><li>网络利用率：全网络的信道利用率的加权平均；</li><li>利用率并非越高越好：当某信道的利用率增大时，该信道引起的时延也会迅速增加；</li><li>也不能使宝贵的通信资源被白白浪费。</li></ul><h3 id="5-8-丢包率"><a href="#5-8-丢包率" class="headerlink" title="5.8 丢包率"></a>5.8 丢包率</h3><ul><li>丢包率即分组丢失率，是指在一定的时间范围内，传输过程中<strong>丢失的分组数量与总分组数量的比率</strong>。</li><li>分组丢失的两个主要原因：<strong>分组误码</strong>，结点交换机缓存队列满（<strong>网络拥塞</strong>）；</li></ul><h2 id="六、计算机网络体系结构"><a href="#六、计算机网络体系结构" class="headerlink" title="六、计算机网络体系结构"></a>六、计算机网络体系结构</h2><h3 id="6-1-常见的计算机网络体系结构"><a href="#6-1-常见的计算机网络体系结构" class="headerlink" title="6.1 常见的计算机网络体系结构"></a>6.1 常见的计算机网络体系结构</h3><h4 id="6-1-1-OSI体系结构"><a href="#6-1-1-OSI体系结构" class="headerlink" title="6.1.1 OSI体系结构"></a>6.1.1 OSI体系结构</h4><ul><li>应用层</li><li>表示层</li><li>会话层</li><li>运输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h4 id="6-1-2-TCP-IP体系结构"><a href="#6-1-2-TCP-IP体系结构" class="headerlink" title="6.1.2 TCP/IP体系结构"></a>6.1.2 TCP/IP体系结构</h4><ul><li>应用层</li><li>运输层</li><li>网际层</li><li>网络接口层</li></ul><h4 id="6-1-3-原理体系结构"><a href="#6-1-3-原理体系结构" class="headerlink" title="6.1.3 原理体系结构"></a>6.1.3 原理体系结构</h4><ul><li>应用层</li><li>运输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h3 id="6-2-计算机网络体系结构中的专用术语"><a href="#6-2-计算机网络体系结构中的专用术语" class="headerlink" title="6.2 计算机网络体系结构中的专用术语"></a>6.2 计算机网络体系结构中的专用术语</h3><h4 id="6-2-1-实体"><a href="#6-2-1-实体" class="headerlink" title="6.2.1 实体"></a>6.2.1 实体</h4><ul><li>实体：任何可发送或接收信息的硬件或软件进程</li><li>对等实体：收发双方相同层次中的实体</li></ul><h4 id="6-2-2-协议"><a href="#6-2-2-协议" class="headerlink" title="6.2.2 协议"></a>6.2.2 协议</h4><ul><li><p>协议：控制两个对等实体进行逻辑通信的规则的集合</p></li><li><p>协议的三要素：语法 语义 同步</p><blockquote><p>语法：定义所交换信息的格式</p><p>语义：定义收发双方所要完成的操作</p><p>同步：定义收发双方的时序关系</p></blockquote></li></ul><h4 id="6-2-3-服务"><a href="#6-2-3-服务" class="headerlink" title="6.2.3 服务"></a>6.2.3 服务</h4><ul><li><p>服务：在协议的控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务。</p><blockquote><p>要实现本层协议，还需要使用下面一层所提供的服务。</p><p>协议是”<strong>水平的</strong>“，服务是”<strong>垂直的</strong>“。</p><p>实体看得见相邻下层所提供的服务，但并不知道实现该服务的具体协议。也就是说，下面的协议对上面的实体是”<strong>透明</strong>“的。</p></blockquote></li><li><p>服务访问点：在同一系统中<strong>相邻两层的实体交换信息的逻辑接口</strong>，用于区分不同的服务类型。</p><blockquote><p>数据链路层的服务访问点为帧的”类型“字段。</p><p>网络层的服务访问点为IP数据报首部中的”协议字段“。</p><p>运输层的服务访问点为”端口号“。</p></blockquote></li><li><p>服务原语：上层使用下层所提供的服务必须通过与下层交换一些命令，这些命令称为服务原语。</p></li><li><p>协议数据单元PDU：<strong>对等层次之间传送的数据包</strong>称为该层的协议数据单元。</p></li><li><p>服务数据单元SDU：同一系统内，<strong>层与层之间交换的数据包</strong>称为服务数据单元。</p></li><li><p>多个SDU可以合成为一个PDU；一个SDU也可以划分为几个PDU。</p></li></ul><p><a href="https://www.helloimg.com/image/oRiLEu"><img src="https://www.helloimg.com/images/2023/01/22/oRiLEu.png"></a></p><h3 id="6-3-计算机网络中分层的必要性"><a href="#6-3-计算机网络中分层的必要性" class="headerlink" title="6.3 计算机网络中分层的必要性"></a>6.3 计算机网络中分层的必要性</h3><ul><li>应用层：解决通过应用进程之间的交互来实现特定网络应用的问题</li><li>表示层：解决通信双方交换信息的表示问题</li><li>会话层：解决进程之间进行会话问题</li><li>运输层：解决进程之间基于网络的通信问题</li><li>网络层：解决分组在多个网络之间传输（路由）的问题</li><li>数据链路层：解决分组在一个网络（或一段链路）上传输的问题</li><li>物理层：解决使用何种信号来传输比特0和1的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js安装及环境变量配置</title>
      <link href="/2023/01/21/nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/01/21/nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、系统环境："><a href="#一、系统环境：" class="headerlink" title="一、系统环境："></a>一、系统环境：</h2><ul><li>windows 10 22h2</li><li>node.js 【Latest LTS Version: <strong>18.13.0</strong> (includes npm 8.19.3)】</li></ul><h2 id="二、安装node-js"><a href="#二、安装node-js" class="headerlink" title="二、安装node.js"></a>二、安装node.js</h2><h3 id="2-1-下载node-js"><a href="#2-1-下载node-js" class="headerlink" title="2.1 下载node.js"></a>2.1 下载node.js</h3><p>直接百度搜索node.js，进入官网<a href="https://nodejs.org/en/download/">Download | Node.js (nodejs.org)</a>界面，下载LTS版本。如图，点击即可。<a href="https://www.helloimg.com/image/oRLRX5"><img src="https://www.helloimg.com/images/2023/01/21/oRLRX5.png" alt="node下载"></a></p><h3 id="2-2-安装node-js"><a href="#2-2-安装node-js" class="headerlink" title="2.2 安装node.js"></a>2.2 安装node.js</h3><p>下载完后直接打开，</p><p>​         <a href="https://www.helloimg.com/image/oRAH10"><img src="https://www.helloimg.com/images/2023/01/21/oRAH10.png" alt="node.js安装001"></a></p><p>下一步，基本上都是安装默认配置。</p><p>​       <a href="https://www.helloimg.com/image/oRAPjv"><img src="https://www.helloimg.com/images/2023/01/21/oRAPjv.png" alt="node.js安装002"></a></p><p>同意，next</p><p>​      <a href="https://www.helloimg.com/image/oRAGIC"><img src="https://www.helloimg.com/images/2023/01/21/oRAGIC.png" alt="node.js安装003"></a></p><p>安装到其他盘符（系统盘外），next</p><p><a href="https://www.helloimg.com/image/oRAF0u"><img src="https://www.helloimg.com/images/2023/01/21/oRAF0u.png" alt="node.js安装004"></a></p><p><a href="https://www.helloimg.com/image/oRAoAt"><img src="https://www.helloimg.com/images/2023/01/21/oRAoAt.png" alt="node.js安装005"></a></p><p>默认即可，点next</p><p><a href="https://www.helloimg.com/image/oRAZGQ"><img src="https://www.helloimg.com/images/2023/01/21/oRAZGQ.png" alt="node.js安装006"></a></p><p>next</p><p><a href="https://www.helloimg.com/image/oRAlIh"><img src="https://www.helloimg.com/images/2023/01/21/oRAlIh.png" alt="node.js安装007"></a></p><p>install安装</p><p><a href="https://www.helloimg.com/image/oRAblm"><img src="https://www.helloimg.com/images/2023/01/21/oRAblm.png" alt="node.js安装008"></a></p><p>finish，到这里node.js安装完成。接下来进行环境变量配置。</p><h2 id="三、node-js环境变量配置"><a href="#三、node-js环境变量配置" class="headerlink" title="三、node.js环境变量配置"></a>三、node.js环境变量配置</h2><h3 id="3-1-新建node-cache和node-global文件夹"><a href="#3-1-新建node-cache和node-global文件夹" class="headerlink" title="3.1 新建node_cache和node_global文件夹"></a>3.1 新建node_cache和node_global文件夹</h3><p>在node.js的安装目录下新建node_cache和node_global文件夹。新建就行，不要管node_global文件夹里面有没有node_modules文件夹，后面会自动生成！！当然，你也可以自己建一个。（如果报错了</p><p><a href="https://www.helloimg.com/image/oRATLq"><img src="https://www.helloimg.com/images/2023/01/21/oRATLq.png" alt="node.js环境变量配置001"></a></p><h3 id="3-2-以管理员身份运行cmd"><a href="#3-2-以管理员身份运行cmd" class="headerlink" title="3.2 以管理员身份运行cmd"></a>3.2 以管理员身份运行cmd</h3><p>执行下列指令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"你刚刚创建的node_global文件夹的路径"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"你刚刚创建的node_cache文件夹的路径"</span></code></pre><p><a href="https://www.helloimg.com/image/oRAjQ6"><img src="https://www.helloimg.com/images/2023/01/21/oRAjQ6.png" alt="node.js环境变量配置002"></a></p><p><a href="https://www.helloimg.com/image/oRA2Rc"><img src="https://www.helloimg.com/images/2023/01/21/oRA2Rc.png" alt="node环境变量配置003"></a></p><h3 id="3-3-查看-npmrc文件"><a href="#3-3-查看-npmrc文件" class="headerlink" title="3.3 查看.npmrc文件"></a>3.3 查看.npmrc文件</h3><p>计算机–&gt;c盘–&gt;用户–&gt;你的用户名–&gt;.npmrc</p><p><a href="https://www.helloimg.com/image/oRAcJ1"><img src="https://www.helloimg.com/images/2023/01/21/oRAcJ1.png" alt="node.js环境变量配置004"></a></p><p><a href="https://www.helloimg.com/image/oRA9uT"><img src="https://www.helloimg.com/images/2023/01/21/oRA9uT.png" alt="node.js环境变量配置005"></a></p><h3 id="3-4-系统变量设置"><a href="#3-4-系统变量设置" class="headerlink" title="3.4 系统变量设置"></a>3.4 系统变量设置</h3><p>设置–&gt;系统–&gt;关于–&gt;相关设置下的高级系统设置–&gt;环境变量</p><blockquote><p>注意，这里要设置两个地方，一个是用户变量，一个是系统变量</p></blockquote><h4 id="3-4-1-系统变量设置"><a href="#3-4-1-系统变量设置" class="headerlink" title="3.4.1 系统变量设置"></a>3.4.1 系统变量设置</h4><p>找到path，点击编辑</p><p>添加</p><pre class=" language-bash"><code class="language-bash">E:\workEnvironment\nodejs\node_modules</code></pre><blockquote><p>就是node.js安装路径的能够node_modules文件夹</p></blockquote><p><a href="https://www.helloimg.com/image/oRLCVA"><img src="https://www.helloimg.com/images/2023/01/21/oRLCVA.png" alt="node.js环境变量配置006"></a></p><p><a href="https://www.helloimg.com/image/oRL5mR"><img src="https://www.helloimg.com/images/2023/01/21/oRL5mR.png" alt="node.js环境变量配置007"></a></p><blockquote><p>这里上面的那个E:\workEnvironment\nodejs\值，应该是自动添加进去的，如果你没有，添加进去。否则你应该在命令行里面输入指令 node -v和npm -v是“找不到指令”的</p></blockquote><h4 id="3-4-2-用户变量设置"><a href="#3-4-2-用户变量设置" class="headerlink" title="3.4.2 用户变量设置"></a>3.4.2 用户变量设置</h4><p>在用户变量的path中，把默认的值：C:\User\xiaoxiao\AppData\Roaming\npm修改为：</p><pre class=" language-bash"><code class="language-bash">E:\workEnvironment\nodejs\node_global</code></pre><p><a href="https://www.helloimg.com/image/oRAuyn"><img src="https://www.helloimg.com/images/2023/01/21/oRAuyn.png" alt="node.js环境变量配置008"></a></p><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>输入指令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express -g</code></pre><p>没有报错，跟下图差不多即配置完成。那个node_global文件夹里面的node_modules文件夹就是在这一步自动生成的（应该</p><p><a href="https://www.helloimg.com/image/oRLBcz"><img src="https://www.helloimg.com/images/2023/01/21/oRLBcz.png" alt="node.js环境变量配置测试"></a></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流的简单应用</title>
      <link href="/2023/01/15/Stream%E6%B5%81/"/>
      <url>/2023/01/15/Stream%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="一、stream流的使用步骤"><a href="#一、stream流的使用步骤" class="headerlink" title="一、stream流的使用步骤"></a>一、stream流的使用步骤</h2><p>1、先得到一条Stream流，并把数据放上去</p><p>2、使用中间方法对流水线上的数据进行操作</p><p>3、使用终结方法对流水线上的数据进行操作</p><h2 id="二、获取stream流"><a href="#二、获取stream流" class="headerlink" title="二、获取stream流"></a>二、获取stream流</h2><table><thead><tr><th align="left">获取方式</th><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td align="left">单列集合</td><td>default Stream&lt; E&gt; stream()</td><td>Collection中的默认方法</td></tr><tr><td align="left">双列集合</td><td>无</td><td>无法直接使用stream流</td></tr><tr><td align="left">数组</td><td>public static &lt; T&gt; Stream&lt; T&gt; stream(T[] array)</td><td>Arrays工具类中的静态方法</td></tr><tr><td align="left">一堆零散数据</td><td>public static &lt; T&gt; Stream&lt; T&gt; of(T…values)</td><td>Stream接口中的静态方法</td></tr></tbody></table><h3 id="2-1-单列集合获取Stream流"><a href="#2-1-单列集合获取Stream流" class="headerlink" title="2.1 单列集合获取Stream流"></a>2.1 单列集合获取Stream流</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.单列集合获取Stream流</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    // 获取到一条流水线，并把集合中的数据放到流水线上        Stream&lt;String> stream1 = list.stream();        // 使用终结方法打印一下流水线上的所有数据        stream1.forEach(new Consumer&lt;String>() {            @Override            public void accept(String s) {                System.out.println(s);            }        });     */</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-2-双列集合获取Stream流"><a href="#2-2-双列集合获取Stream流" class="headerlink" title="2.2 双列集合获取Stream流"></a>2.2 双列集合获取Stream流</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 双列集合 ---> 无法直接使用stream流</span>        <span class="token comment" spellcheck="true">// 1.创建双列集合</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.添加数据</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">444</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.第一种方式获取stream流</span>        hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.第二种方式获取stream流</span>        hashMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-3-数组获取Stream流"><a href="#2-3-数组获取Stream流" class="headerlink" title="2.3 数组获取Stream流"></a>2.3 数组获取Stream流</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数组</span>        <span class="token comment" spellcheck="true">// 1.创建数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.获取stream流</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意：</span>        <span class="token comment" spellcheck="true">// stream接口中静态方法of的细节：</span>        <span class="token comment" spellcheck="true">// 方法的形参是一个可变参数，可以传递一堆零散的数据，也可以传递数组</span>        <span class="token comment" spellcheck="true">// 但是数组必须是引用类型的，如果传递基本数据类型，是会把整个数组当成一个元素，放到Stream流中</span>        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [I@448139f0</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-4-一堆零散数据获取Stream流"><a href="#2-4-一堆零散数据获取Stream流" class="headerlink" title="2.4 一堆零散数据获取Stream流"></a>2.4 一堆零散数据获取Stream流</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一堆零散数据</span>        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="三、stream流的中间方法"><a href="#三、stream流的中间方法" class="headerlink" title="三、stream流的中间方法"></a>三、stream流的中间方法</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Stream&lt; T&gt; filter(Predicate&lt;? super T&gt; predicate)</td><td>过滤</td></tr><tr><td>Stream&lt; T&gt; limit(long maxSize)</td><td>获取前几个元素</td></tr><tr><td>Stream&lt; T&gt; skip(long n)</td><td>跳过前几个元素</td></tr><tr><td>Stream&lt; T&gt; distinct()</td><td>元素去重，依赖（hashCode和equals方法）</td></tr><tr><td>static &lt; T&gt; Stream&lt; T&gt; concat(Stream a, Stream b)</td><td>合并a和b两个流为一个流</td></tr><tr><td>Stream&lt; R&gt; map (Function&lt; T, R&gt; mapper)</td><td>转换流中的数据类型</td></tr></tbody></table><blockquote><p>注意1：中间方法，返回新的Stream流，原来的Stream流只能使用一次，所以一般建议使用链式编程。</p></blockquote><blockquote><p>注意2：修改Stream流中的数据，不会影响原来集合或者数组中的数据。</p></blockquote><h3 id="3-1-filter、limit、skip方法"><a href="#3-1-filter、limit、skip方法" class="headerlink" title="3.1 filter、limit、skip方法"></a>3.1 filter、limit、skip方法</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            filter            过滤            limit             获取前几个元素            skip              跳过前几个元素            注意1：中间方法，返回新的Stream流，原来的Stream流只能使用一次，所以一般建议使用链式编程。            注意2：修改Stream流中的数据，不会影响原来集合或者数组中的数据。         */</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"张无忌"</span><span class="token punctuation">,</span><span class="token string">"周芷若"</span><span class="token punctuation">,</span><span class="token string">"赵敏"</span><span class="token punctuation">,</span><span class="token string">"张强"</span><span class="token punctuation">,</span><span class="token string">"张三丰"</span><span class="token punctuation">,</span><span class="token string">"张翠山"</span><span class="token punctuation">,</span><span class="token string">"张良"</span><span class="token punctuation">,</span><span class="token string">"王二麻子"</span><span class="token punctuation">,</span><span class="token string">"谢广坤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// filter 过滤   把张开头的留下，其余的过滤掉</span>        <span class="token comment" spellcheck="true">/*        // 匿名内部类        list.stream().filter(new Predicate&lt;String>() {            @Override            public boolean test(String s) {                // 如果返回值为true，表示当前数据留下                // 如果返回值是false，表示当前数据舍弃不要                return s.startsWith("张");            }        }).forEach(s -> System.out.println(s));        */</span>        <span class="token comment" spellcheck="true">// lambda表达式</span>        <span class="token comment" spellcheck="true">// list.stream().filter(s->s.startsWith("张")).forEach(s -> System.out.println(s));</span>        <span class="token comment" spellcheck="true">// limit  获取前几个元素</span>        <span class="token comment" spellcheck="true">// list.stream().limit(3).forEach(s -> System.out.println(s));</span>        <span class="token comment" spellcheck="true">// skip 跳过前几个元素</span>        <span class="token comment" spellcheck="true">// list.stream().skip(4).forEach(s -> System.out.println(s));</span>        <span class="token comment" spellcheck="true">// 获取 "张强","张三丰","张翠山"</span>        <span class="token comment" spellcheck="true">// list.stream().skip(3).limit(3).forEach(s -> System.out.println(s));</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-2-distinct、concat方法"><a href="#3-2-distinct、concat方法" class="headerlink" title="3.2 distinct、concat方法"></a>3.2 distinct、concat方法</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            distinct         元素去重，依赖(hashCode和equals方法)            concat           合并a和b两个流为一个流            注意1：中间方法，返回新的Stream流，原来的Stream流只能使用一次，所以一般建议使用链式编程。            注意2：修改Stream流中的数据，不会影响原来集合或者数组中的数据。         */</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> <span class="token string">"张无忌"</span><span class="token punctuation">,</span><span class="token string">"张无忌"</span><span class="token punctuation">,</span><span class="token string">"张强"</span><span class="token punctuation">,</span><span class="token string">"张三丰"</span><span class="token punctuation">,</span><span class="token string">"张翠山"</span><span class="token punctuation">,</span><span class="token string">"张良"</span><span class="token punctuation">,</span><span class="token string">"王二麻子"</span><span class="token punctuation">,</span><span class="token string">"谢广坤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">,</span> <span class="token string">"周芷若"</span><span class="token punctuation">,</span><span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// distinct         元素去重，依赖(hashCode和equals方法)</span>        <span class="token comment" spellcheck="true">// list1.stream().distinct().forEach(s -> System.out.println(s));</span>        <span class="token comment" spellcheck="true">// concat           合并a和b两个流为一个流</span>        Stream<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-3-map方法"><a href="#3-3-map方法" class="headerlink" title="3.3 map方法"></a>3.3 map方法</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            map           转换流中的数据类型            注意1：中间方法，返回新的Stream流，原来的Stream流只能使用一次，所以一般建议使用链式编程。            注意2：修改Stream流中的数据，不会影响原来集合或者数组中的数据。         */</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"张无忌-15"</span><span class="token punctuation">,</span><span class="token string">"周芷若-14"</span><span class="token punctuation">,</span><span class="token string">"赵敏-13"</span><span class="token punctuation">,</span><span class="token string">"张强-20"</span><span class="token punctuation">,</span><span class="token string">"张三丰-100"</span><span class="token punctuation">,</span><span class="token string">"张翠山-40"</span><span class="token punctuation">,</span><span class="token string">"张良-35"</span><span class="token punctuation">,</span><span class="token string">"王二麻子-37"</span><span class="token punctuation">,</span><span class="token string">"谢广坤-41"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只获取里面的年龄并进行打印</span>        <span class="token comment" spellcheck="true">// String ---> int</span>        <span class="token comment" spellcheck="true">// 第一个类型：流中原本的数据类型</span>        <span class="token comment" spellcheck="true">// 第二个类型：表示转换之后的数据</span>        <span class="token comment" spellcheck="true">// apply的形参s：依次表示流里面的每一个数据</span>        <span class="token comment" spellcheck="true">// 返回值：表示转换之后的数据</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">apply</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String ageString <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> age <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ageString<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> age<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="四、stream流中的终结方法"><a href="#四、stream流中的终结方法" class="headerlink" title="四、stream流中的终结方法"></a>四、stream流中的终结方法</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>void forEach(Consumer action)</td><td>遍历</td></tr><tr><td>long count()</td><td>统计</td></tr><tr><td>toArray()</td><td>收集流中的数据，放到数组中</td></tr><tr><td>collect(Collector collector)</td><td>收集流中的数据，放到集合中</td></tr></tbody></table><h3 id="4-1-void-forEach-Consumer-action-、long-count-、toArray-方法"><a href="#4-1-void-forEach-Consumer-action-、long-count-、toArray-方法" class="headerlink" title="4.1 void forEach(Consumer action)、long count()、toArray()方法"></a>4.1 void forEach(Consumer action)、long count()、toArray()方法</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            void forEach(Consumer action)      遍历            long count()                       统计            toArray()                          收集流中的数据，放到数组中         */</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"张无忌"</span><span class="token punctuation">,</span><span class="token string">"周芷若"</span><span class="token punctuation">,</span><span class="token string">"赵敏"</span><span class="token punctuation">,</span><span class="token string">"张强"</span><span class="token punctuation">,</span><span class="token string">"张三丰"</span><span class="token punctuation">,</span><span class="token string">"张翠山"</span><span class="token punctuation">,</span><span class="token string">"张良"</span><span class="token punctuation">,</span><span class="token string">"王二麻子"</span><span class="token punctuation">,</span><span class="token string">"谢广坤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// void forEach(Consumer action)      遍历</span>        <span class="token comment" spellcheck="true">// Consumer的泛型：表示流中的数据的类型</span>        <span class="token comment" spellcheck="true">// accept()方法的形参s：依次表示流里面的每一个数据</span>        <span class="token comment" spellcheck="true">// 方法体：对每一个数据进行处理操作</span>    <span class="token comment" spellcheck="true">/*    list.stream().forEach(new Consumer&lt;String>() {            @Override            public void accept(String s) {                System.out.println(s);            }        });     */</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******long count()**********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// long count()     统计</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********toArray()*********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// toArray() 收集流中的数据，放到数组中</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********toArray()********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// IntFunction的泛型：具体类型的数组</span>        <span class="token comment" spellcheck="true">// apply()的形参：流中数据的个数，要和数组的长度保持一致</span>        <span class="token comment" spellcheck="true">// apply()的返回值：具体类型的数组</span>        <span class="token comment" spellcheck="true">// 方法体：就是创建数组</span>        <span class="token comment" spellcheck="true">// toArray()方法的参数的作用：负责创建一个指定类型的数组</span>        <span class="token comment" spellcheck="true">// toArray()方法的底层，会依次得到流里面的每一个数据，并把数据放到数组里</span>        <span class="token comment" spellcheck="true">// toArray()方法的返回值：是一个装着流里面所有数据的数组</span>        <span class="token comment" spellcheck="true">/*String[] arr = list.stream().toArray(new IntFunction&lt;String[]>() {            @Override            public String[] apply(int value) {                return new String[value];            }        });        System.out.println(Arrays.toString(arr));*/</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4-2-collect-Collector-collector-方法"><a href="#4-2-collect-Collector-collector-方法" class="headerlink" title="4.2 collect(Collector collector)方法"></a>4.2 collect(Collector collector)方法</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            collect(Collector collector)  收集流中的数据，放到集合中         */</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"张无忌-男-15"</span><span class="token punctuation">,</span><span class="token string">"周芷若-女-14"</span><span class="token punctuation">,</span><span class="token string">"赵敏-女-13"</span><span class="token punctuation">,</span><span class="token string">"张强-男-20"</span><span class="token punctuation">,</span><span class="token string">"张三丰-男-100"</span><span class="token punctuation">,</span><span class="token string">"张翠山-男-40"</span><span class="token punctuation">,</span><span class="token string">"张良-男-35"</span><span class="token punctuation">,</span><span class="token string">"王二麻子-男-37"</span><span class="token punctuation">,</span><span class="token string">"谢广坤-男-41"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******** List *******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 收集到List集合中</span>        <span class="token comment" spellcheck="true">// 需求：</span>        <span class="token comment" spellcheck="true">// 要把所有的男性收集起来</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********* Set **********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 收集到Set集合中</span>        <span class="token comment" spellcheck="true">// 需求：</span>        <span class="token comment" spellcheck="true">// 要把所有的男性收集起来</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> newSet <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********** Map *********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 收集到Set集合中</span>        <span class="token comment" spellcheck="true">// 需求：</span>        <span class="token comment" spellcheck="true">// 要把所有的男性收集起来</span>        <span class="token comment" spellcheck="true">// 键：姓名，  值：年龄</span>        <span class="token comment" spellcheck="true">/*            toMap: 参数一表示键的生成规则                   参数二表示值的生成规则            参数一：                Function泛型一：表示流中每一个数据的类型                        泛型二：表示Map集合中键的数据类型                方法apply形参：依次表示流里面的每一个数据                       方法体：生成键的代码                       返回值：已经生成的键            参数二：                Function泛型一：表示流中每一个数据的类型                        泛型二：表示Map集合中值的数据类型                方法apply形参：依次表示流里面的每一个数据                       方法体：生成值的代码                       返回值：已经生成的值            保存到Map集合中，键不能重复         */</span>        <span class="token comment" spellcheck="true">/*Map&lt;String, Integer> newMap = list.stream()                .filter(s -> "男".equals(s.split("-")[1]))                .collect(Collectors.toMap(new Function&lt;String, String>() {                    @Override                    public String apply(String s) {                        return s.split("-")[0];                    }                }, new Function&lt;String, Integer>() {                    @Override                    public Integer apply(String s) {                        return Integer.parseInt(s.split("-")[2]);                    }                }));        System.out.println(newMap);*/</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> newMap <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"男"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="五、练习"><a href="#五、练习" class="headerlink" title="五、练习"></a>五、练习</h2><h3 id="5-1-练习一"><a href="#5-1-练习一" class="headerlink" title="5.1 练习一"></a>5.1 练习一</h3><blockquote><p>定义一个集合，并添加一些整数   1,2,3,4,5,6,7,8,9,10<br>过滤奇数，只留下整数<br>并将结果保存起来</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            定义一个集合，并添加一些整数   1,2,3,4,5,6,7,8,9,10            过滤奇数，只留下整数            并将结果保存起来         */</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5-2-练习二"><a href="#5-2-练习二" class="headerlink" title="5.2 练习二"></a>5.2 练习二</h3><blockquote><p>创建一个ArrayList集合，并添加以下字符串，字符串中前面是姓名，后面是年龄<br>“zhangsan,23”<br>“lisi,24”<br>“wangwu,25”<br>保留年龄大于等于24岁的人，并将结果收集到Map集合中，姓名为键，年龄为值</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            创建一个ArrayList集合，并添加以下字符串，字符串中前面是姓名，后面是年龄            "zhangsan,23"            "lisi,24"            "wangwu,25"            保留年龄大于等于24岁的人，并将结果收集到Map集合中，姓名为键，年龄为值         */</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"zhangsan,23"</span><span class="token punctuation">,</span> <span class="token string">"lisi,24"</span><span class="token punctuation">,</span><span class="token string">"wangwu,25"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> newMap <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">24</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>                        s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        s <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5-3-练习三"><a href="#5-3-练习三" class="headerlink" title="5.3 练习三"></a>5.3 练习三</h3><blockquote><p>现在有两个ArrayList集合，<br>第一个集合中：存储6名男演员的名字和年龄。第二个集合中：存储6名女演员的名字和年龄。<br>姓名和年龄中间用逗号隔开。比如：张三,23<br>要求完成以下操作：<br>1，男演员只要名字为3个字的前两人<br>2，女演员只要姓杨的，并且不要第一个<br>3，把过滤后的男演员姓名和女演员姓名合并到一起<br>4，将上一步的演员信息封装成Actor对象。<br>5，将所有的演员对象都保存到List集合中</p><p>男演员：”蔡虚坤,24”,”叶憨咸,23”,”刘不甜,22”,”吴签,24”,”谷嘉,30”,”肖梁梁,27”<br>女演员：”赵小怡,35”,”杨依,36”,”高苑苑,43”,”张甜甜,31”,”刘诗,35”,”杨小幂,33”</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            现在有两个ArrayList集合，            第一个集合中：存储6名男演员的名字和年龄。第二个集合中：存储6名女演员的名字和年龄。            姓名和年龄中间用逗号隔开。比如：张三,23            要求完成以下操作：            1，男演员只要名字为3个字的前两人            2，女演员只要姓杨的，并且不要第一个            3，把过滤后的男演员姓名和女演员姓名合并到一起            4，将上一步的演员信息封装成Actor对象。            5，将所有的演员对象都保存到List集合中            男演员："蔡虚坤,24","叶憨咸,23","刘不甜,22","吴签,24","谷嘉,30","肖梁梁,27"            女演员："赵小怡,35","杨依,36","高苑苑,43","张甜甜,31","刘诗,35","杨小幂,33"         */</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> <span class="token string">"蔡虚坤,24"</span><span class="token punctuation">,</span><span class="token string">"叶憨咸,23"</span><span class="token punctuation">,</span><span class="token string">"刘不甜,22"</span><span class="token punctuation">,</span><span class="token string">"吴签,24"</span><span class="token punctuation">,</span><span class="token string">"谷嘉,30"</span><span class="token punctuation">,</span><span class="token string">"肖梁梁,27"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">,</span> <span class="token string">"赵小怡,35"</span><span class="token punctuation">,</span><span class="token string">"杨依,36"</span><span class="token punctuation">,</span><span class="token string">"高苑苑,43"</span><span class="token punctuation">,</span><span class="token string">"张甜甜,31"</span><span class="token punctuation">,</span><span class="token string">"刘诗,35"</span><span class="token punctuation">,</span><span class="token string">"杨小幂,33"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream1 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream2 <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"杨"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Actor<span class="token operator">></span> newList <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>stream1<span class="token punctuation">,</span> stream2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span>                        s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>类 Actor</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Actor</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Actor</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Actor{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APRIORI算法</title>
      <link href="/2023/01/01/APRIORI%E7%AE%97%E6%B3%95/"/>
      <url>/2023/01/01/APRIORI%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1、什么是APRIORI算法"><a href="#1、什么是APRIORI算法" class="headerlink" title="1、什么是APRIORI算法"></a>1、什么是APRIORI算法</h3><p>apriori算法是一种关联规则算法，其目的是找出频繁项集。</p><h3 id="2、APRIOIRI算法的基本思想"><a href="#2、APRIOIRI算法的基本思想" class="headerlink" title="2、APRIOIRI算法的基本思想"></a>2、APRIOIRI算法的基本思想</h3><p>首先找出所有的频集，这些项集出现的频繁性至少和预定义的最小支持度一样。然后由频集产生强关联规则，这些规则必须满足最小支持度和最小可信度。然后使用第1步找到的频集产生期望的规则，产生只包含集合的项的所有规则，其中每一条规则的右部只有一项，这里采用的是中规则的定义。一旦这些规则被生成，那么只有那些大于用户给定的最小可信度的规则才被留下来。为了生成所有频集，采用递归的方法。（—-百度百科）</p><h3 id="3、算法流程"><a href="#3、算法流程" class="headerlink" title="3、算法流程"></a>3、算法流程</h3><p>准确的来说，应该是求关联规则的算法流程，APRIORI算法只不过是求频繁项集的罢了。这里给出APRIORI算法和根据频繁项集求关联规则的算法流程。</p><h4 id="3-1-APRIORI算法流程"><a href="#3-1-APRIORI算法流程" class="headerlink" title="3.1 APRIORI算法流程"></a>3.1 APRIORI算法流程</h4><ol><li><p>求出频繁1项集</p></li><li><p>根据频繁项集找候选项集</p></li><li><p>根据候选项集重新寻找频繁项集</p><p>其中2，3步一直寻找下去，一直把所有的频繁项集找完。</p><p>怎么说呢，APRIORI算法其实就这两步，但是由于要求关联规则，所以还需要最后一步–&gt;根据求得的频繁项集挖掘出关联规则。</p></li></ol><h4 id="3-2-根据频繁项集求得关联规则"><a href="#3-2-根据频繁项集求得关联规则" class="headerlink" title="3.2 根据频繁项集求得关联规则"></a>3.2 根据频繁项集求得关联规则</h4><ol><li> 拿到一个频繁项集</li><li> 找出这个频繁项集的所有真子集</li><li> 按照“ <strong>真子集–&gt; 频繁项集除真子集外的集合：真子集出现次数/频繁项集出现次数</strong>”的格式一一列出。</li></ol><p>流程图如下：</p><p><a href="https://www.helloimg.com/image/oCjcaQ"><img src="https://www.helloimg.com/images/2023/01/05/oCjcaQ.png" alt="apriori寻找关联规则流程图"></a></p><h3 id="4、算法实现"><a href="#4、算法实现" class="headerlink" title="4、算法实现"></a>4、算法实现</h3><h4 id="4-1-主要数据结构："><a href="#4-1-主要数据结构：" class="headerlink" title="4.1 主要数据结构："></a>4.1 主要数据结构：</h4><table><thead><tr><th>数据结构</th><th>说明</th></tr></thead><tbody><tr><td>List&lt;List<integer>&gt; dataSet</integer></td><td>用于存放数据集</td></tr><tr><td>BidiMap&lt;String, Integer&gt; strToSumMap</td><td>名词、数字间相互转换的索引表</td></tr><tr><td>Map&lt;List<integer>, Integer&gt; frequentCountMap</integer></td><td>记录频繁项集以及它的次数</td></tr></tbody></table><blockquote><p>BidiMap 是Apache Commons Collections 4.4下的工具类的一结构，可以用它来构造“值—&gt;键”的map类型。注意如果有相同的值存在BidiMap会覆盖掉已有的key。</p></blockquote><h4 id="4-2-函数介绍："><a href="#4-2-函数介绍：" class="headerlink" title="4.2 函数介绍："></a>4.2 函数介绍：</h4><table><thead><tr><th>函数名</th><th>位置</th><th>返回类型</th><th>作用</th></tr></thead><tbody><tr><td>loadData(String fileName)</td><td>AprioriUtil.java</td><td>List<string></string></td><td>从数据集中加载数据</td></tr><tr><td>makeIndex(List&lt;List<string>&gt; array)</string></td><td>AprioriUtil.java</td><td>BidiMap&lt;String, Integer&gt;</td><td>将原始数据集中的数据建立一个汉字（英文）-数值的索引表</td></tr><tr><td>strToSum(List&lt;List<string>&gt; array, BidiMap&lt;String, Integer&gt; index)</string></td><td>AprioriUtil.java</td><td>List&lt;List<integer>&gt;</integer></td><td>将文字数据集转变为数字数据集</td></tr><tr><td>sumToStr(List&lt;List<string>&gt; array, BidiMap&lt;String, Integer&gt; index)</string></td><td>AprioriUtil.java</td><td>List&lt;List<string>&gt;</string></td><td>将数字数据集变回文字</td></tr><tr><td>setToList(Map&lt;List<integer>, Integer&gt; map)</integer></td><td>AprioriUtil.java</td><td>List&lt;List<integer>&gt;</integer></td><td>从map集合中得到所有的键集合</td></tr><tr><td>getFrequentCount(List&lt;List<integer>&gt; dataSet, List&lt;List<integer>&gt; allFrequent)</integer></integer></td><td>AprioriUtil.java</td><td>Map&lt;List<integer>, Integer&gt;</integer></td><td>得到频繁项集的次数</td></tr><tr><td>splitList(List<integer> frequent)</integer></td><td>AprioriUtil.java</td><td>Map&lt;List<integer>, List<integer>&gt;</integer></integer></td><td>将一个频繁项集切割组合成多个List数组（找真子集）</td></tr><tr><td>oneFrequentSet(List&lt;List<integer>&gt; dataSet)</integer></td><td>Apriori.java</td><td>Map&lt;List<integer>, Integer&gt;</integer></td><td>生成频繁1项集,并统计其出现的次数</td></tr><tr><td>getSupportItemsSet(Map&lt;List<integer>, Integer&gt; result, int count)</integer></td><td>Apriori.java</td><td>Map&lt;List<integer>, Integer&gt;</integer></td><td>得到频繁项集</td></tr><tr><td>lkToCk(List&lt;List<integer>&gt; dataSet, int k)</integer></td><td>Apriori.java</td><td>List&lt;List<integer>&gt;</integer></td><td>得到Ck候选集</td></tr><tr><td>ckToLk(List&lt;List<integer>&gt; dataSet, List&lt;List<integer>&gt; frequent)</integer></integer></td><td>Apriori.java</td><td>Map&lt;List<integer>, Integer&gt;</integer></td><td>频繁项集预处理（统计每个候选集的次数）</td></tr></tbody></table><h4 id="4-3-关键代码："><a href="#4-3-关键代码：" class="headerlink" title="4.3 关键代码："></a>4.3 关键代码：</h4><h5 id="4-3-1-lkToCk-List-lt-List-gt-dataSet-int-k-："><a href="#4-3-1-lkToCk-List-lt-List-gt-dataSet-int-k-：" class="headerlink" title="4.3.1 lkToCk(List<List> dataSet, int k)："></a>4.3.1 lkToCk(List&lt;List<integer>&gt; dataSet, int k)：</integer></h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">lkToCk</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> dataSet<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> temp <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.遍历频繁K-1项目集</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dataSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dataSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 2.将两个数组合并为一个，并去重</span>                temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>dataSet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 3.判断读取的候选集的元素个数，如果大于k，则去掉,等于k+1则保存起来</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="4-3-2-splitList-List-frequent"><a href="#4-3-2-splitList-List-frequent" class="headerlink" title="4.3.2 splitList(List frequent):"></a>4.3.2 splitList(List<integer> frequent):</integer></h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">splitList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> frequent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 全部的子集</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> allTrueSubset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.求出频繁项集的所有真子集</span>        <span class="token comment" spellcheck="true">//子集的数量</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> frequent<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> temp <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> frequent<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//循环前检测j是否是000</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>frequent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                j <span class="token operator">=</span> j <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>                index <span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>intValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> frequent<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                allTrueSubset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2.遍历真子集，并在频繁项集中去除</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> allOtherSubset <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">:</span> allTrueSubset<span class="token punctuation">)</span> <span class="token punctuation">{</span>            allOtherSubset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HashSet h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span>frequent<span class="token punctuation">)</span><span class="token punctuation">;</span>            HashSet h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            h1<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>            allOtherSubset<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> allOtherSubset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里讲解一下寻找真子集的思路：</p><p><a href="https://www.helloimg.com/image/oCjYu5"><img src="https://www.helloimg.com/images/2023/01/05/oCjYu5.png" alt="寻找真子集01"></a></p><p>如图，假设这是一个数组，那么我们可以这样来寻找子集：将每一个数组元素是否出现用1或0来表示。然后我们只需要将出现1的元素重新拼接成一个新的数组，这样就可以找到该数组的子集。之后去除空集和该数组本身，就可以得到该数组的所有真子集了。</p><h5 id="4-3-3-doApriori"><a href="#4-3-3-doApriori" class="headerlink" title="4.3.3 doApriori():"></a>4.3.3 doApriori():</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">doApriori</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 4.生成频繁1项集</span>        Map<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">,</span> Integer<span class="token operator">></span> oneFreTemp <span class="token operator">=</span> apriori<span class="token punctuation">.</span><span class="token function">oneFrequentSet</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录总个数（交易数、）</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// map形式的频繁1项集</span>        Map<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">,</span> Integer<span class="token operator">></span> oneSupportItemsSet <span class="token operator">=</span> apriori<span class="token punctuation">.</span><span class="token function">getSupportItemsSet</span><span class="token punctuation">(</span>oneFreTemp<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录一下频繁1项集的个数，可能会围绕其展开</span>        <span class="token keyword">int</span> oneFreCount <span class="token operator">=</span> oneSupportItemsSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// list形式的频繁1项集</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> oneFre <span class="token operator">=</span> AprioriUtil<span class="token punctuation">.</span><span class="token function">setToList</span><span class="token punctuation">(</span>oneSupportItemsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> Lk <span class="token operator">=</span> oneFre<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> allFreSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allFreSet<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Lk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.循环执行Ck->Lk, Lk->Ck,直到没有频繁项集出现，就可以停止了。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> count<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 6.根据频繁项集Lk生成候选Ck+1项集</span>            List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> CkAdd <span class="token operator">=</span> apriori<span class="token punctuation">.</span><span class="token function">lkToCk</span><span class="token punctuation">(</span>Lk<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println(CkAdd);</span>            <span class="token comment" spellcheck="true">// 生成频繁项集Lk+1</span>            Map<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">,</span> Integer<span class="token operator">></span> LkTempAdd <span class="token operator">=</span> apriori<span class="token punctuation">.</span><span class="token function">ckToLk</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> CkAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">,</span> Integer<span class="token operator">></span> LkAdd <span class="token operator">=</span> apriori<span class="token punctuation">.</span><span class="token function">getSupportItemsSet</span><span class="token punctuation">(</span>LkTempAdd<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            Lk <span class="token operator">=</span> AprioriUtil<span class="token punctuation">.</span><span class="token function">setToList</span><span class="token punctuation">(</span>LkAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 7.判断频繁项集Lk+1是否为空，</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Lk<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                allFreSet<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Lk<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> allFreSet<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5、运行结果"><a href="#5、运行结果" class="headerlink" title="5、运行结果"></a>5、运行结果</h3><h4 id="5-1-数据集："><a href="#5-1-数据集：" class="headerlink" title="5.1 数据集："></a>5.1 数据集：</h4><pre class=" language-java"><code class="language-java">A、B、C、D、E、F、GA、B、C、D、E、HA、B、C、D、E、F、G、HA、B、C、G、HA、B、C、D、G、HA、B、C、D、E、F、G、HA、B、C、D、E、F、GA、B、C、E、G、HA、B、C、D、E、F、HC、D、E、F、G、HA、B、C、D、G、HA、C、D、E、F、G、HA、B、C、E、F、G、HB、C、E、F、G、H</code></pre><h4 id="5-2-求频繁项集："><a href="#5-2-求频繁项集：" class="headerlink" title="5.2 求频繁项集："></a>5.2 求频繁项集：</h4><p><a href="https://www.helloimg.com/image/oCucc0"><img src="https://www.helloimg.com/images/2023/01/05/oCucc0.png" alt="求频繁项集"></a></p><h4 id="5-3-求关联规则："><a href="#5-3-求关联规则：" class="headerlink" title="5.3 求关联规则："></a>5.3 求关联规则：</h4><p><a href="https://www.helloimg.com/image/oCudVm"><img src="https://www.helloimg.com/images/2023/01/05/oCudVm.png" alt="求关联规则"></a></p><h4 id="5-4-得到真子集及除真子集外的频繁项集的其他元素："><a href="#5-4-得到真子集及除真子集外的频繁项集的其他元素：" class="headerlink" title="5.4 得到真子集及除真子集外的频繁项集的其他元素："></a>5.4 得到真子集及除真子集外的频繁项集的其他元素：</h4><p><a href="https://www.helloimg.com/image/oCuN8q"><img src="https://www.helloimg.com/images/2023/01/05/oCuN8q.png" alt="切割数组"></a></p><h3 id="6、后记"><a href="#6、后记" class="headerlink" title="6、后记"></a>6、后记</h3><p>  其实apriori算法实现起来并不难，个人觉得难点在于数据的处理，个人在实现的时候十分想跑去用python来写，因为知道python有numpy等包好处理数据，Java的实在找不到。。。（从这里可以看出，算法还是要学的</p><p>  好久没写东西了，感觉写得乱得一批，然后这里只给出了一点代码，完整的代码在我的<a href="https://github.com/CN-xiaoxiao/DataMining">GitHub</a>上。</p><p>欢迎大家评论哦！谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 数据挖掘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年年中总结</title>
      <link href="/2021/07/22/2021%E5%B9%B4%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
      <url>/2021/07/22/2021%E5%B9%B4%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2021年年中总结"><a href="#2021年年中总结" class="headerlink" title="2021年年中总结"></a>2021年年中总结</h1><p>​    时间飞快今年已经过去了一半。说实话，这半年来，我好像什么东西都没有学，很快就过去了。我学习的进度也是很慢的，原本以为看完视频就好了，结果一上机，全部都还给老师了。就拿前几天学习的MySQL吧，我把入门学完了，然后去写练习，我根本就没有思路，一些关键字都还记不住，真的就像学了和没学一样。换句话来说，可能是学得太快了。学得快，忘得快。我现在也是有点压抑的，因为上机实践少，又有点急于求成，学习效率极其低下。</p><p>​    原本计划这个暑假学完Java多线程、汇编、MySQL数据库和前端三剑客（HTML、CSS、JavaScript）的，现在看来是天方夜谭，因为我时间不够，讲真的，如果是真的想学精，而不是应付考试，暑假的这两个月根本来不及。前面我也说过实践、上机，就我现在的水平而言吧，我感觉计算机最重要的就是实践了，只有实践上机才知道自己是不是真的掌握了。学习这些东西其实也是要花很多时间的，就Java多线程至少也要一两个月来学习，汇编也是如此。</p><p>​    也罢，之前的博客也没有写完，这里先道歉。u1s1，是真的时间不多，一定补完！一定！！</p><p>​    下半年就是把上面讲的东西学好，然后可能会入手一个树莓派玩玩，再就是写写博客，大概就这么多吧。</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Autobiography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序及其优化</title>
      <link href="/2021/05/24/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
      <url>/2021/05/24/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>​    我们总是有这种想法：当碰到一组数据时，我们总喜欢对这组数据进行排序。因为排好序后，我们可以轻松的进行分析。</p><p>​    今天，我们来学习的排序算法是最简单的一种：冒泡排序。</p><p>​    为什么叫冒泡排序呢？因为这种排序算法的每一个元素都可以像小气泡一样，根据自身的大小，一步步向数组的一侧移动。</p><p><img src="https://www.helloimg.com/images/2021/05/24/BfWuPY.png" alt="冒泡排序第一轮排序"></p><p>​    我们可以看到，这第一轮中的9，一直慢慢的“飘到”数组的最后，这就是为什么这种算法被称为的冒泡排序的原因之一。同时，我们观察到，他是两两逐个比较的，一旦一个元素比他的右边的元素要大，就交换两者的位置，如果是小于或者等于就不做变动。</p><p>​    下面是从网络上找到的一个冒泡排序的完整图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMjMyMzg0NDktMjE0NjE2OTE5Ny5naWY" alt="冒泡排序示意图"></p><p>既然知道了冒泡排序的过程，我们来看看冒泡排序的代码实现：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BubbleSort1</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    因为冒泡排序是两两相互比较，所以对于有n个元素的数组，我们只需要进行n-1次循环，就可以把他排好序。然后我们每一轮排序都可以找到一个最大的数，把他“归位”，所以在下一次比较中，我们只需比较元素个数减去轮次即可，即代码中的 j &lt; len - i - 1。</p><p>​    就这样，冒泡排序就完成了，他是一个很简单的排序算法，可以说其他的很多算法都是由冒泡排序演变过来的，比如快速排序，归并排序，堆排序。</p><p>​    但是，不知道你发现了没有，当数组其实已经排好序了，但是我们的程序还不知道，所以他还是进行了两两比较的过程。</p><p><img src="https://www.helloimg.com/images/2021/05/25/Bf9WEt.png"></p><p>​    为了解决这一点，我们可以设置一个标志符号，用来判断，这一轮的排序是否继续了交换，代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BubbleSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> isChange <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                isChange <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isChange<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    但是，我们还发现了一个问题，什么问题呢？看下图：</p><p><img src="https://www.helloimg.com/images/2021/05/25/Bf999u.png" alt="冒泡排序03"></p><p>​    元素44，46，47明明已经排好序了，而冒泡排序还是傻傻的将他们进行了比较。我们思考一下，该如何解决这个问题呢？</p><p>​    其实，我们可以记录最后一次发生<strong>交换</strong>的位置，然后下一轮排序的边界就是这个最后一次发生交换的下标。为什么呢？因为只要这一轮排序还没有到达这一轮排序的末尾边界，他又从这一轮排序中某个位置后，没有发生交换的过程。等到下一次排序碰到这个位置后的数字的时候，是不会发生交换的。这就说明这个最后一次发生交换的元素后面的其他所有元素，都是已经排好序的了。</p><p>​    看起来有点复杂，我们不妨想一想，这一次我们遇到44、46、47的时候我们是没有发生交换的过程的。等这一轮排序结束后，47就已经归位了。下一轮，到44、46的时候，我们又比较了一次，但是他们没有发生交换，也就是说，我们在这里多比较了几次。我们优化的思路就是来源于这。</p><p>​    试思考代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BubbleSort3</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> lastChangIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sortBorder <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> isChange <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sortBorder<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                isChange <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                lastChangIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        sortBorder <span class="token operator">=</span> lastChangIndex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isChange<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    这里我们记录每轮排序最后一次发生交换的位置sortBorder，因为我们的算法是，每次找到最大的元素，然后把他“固定”好，所以，在sortBorder后面的元素一定是排好序的了。</p><p>​    本文到这里就结束了，希望对你有帮助，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.1字符串匹配的朴素实现</title>
      <link href="/2021/05/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9A%84%E6%9C%B4%E7%B4%A0%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/05/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9A%84%E6%9C%B4%E7%B4%A0%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>​    </p><p>​    很多情况，我们都会遇到字符串的匹配问题，比如说，你在QQ上或者手机通讯录上输入一组数字，当我们逐个输入后，会发现，所有的关于你当前输入的号码（数字）的相关好友、电话都显示出来了。我们想要实现这种功能，可以将其转化为字符串的模式匹配问题。其中，最容易想到的方法就是朴素搜索算法。什么是朴素搜索算法呢？它又称暴力搜索。这么来说吧，就是我拿着模式串和主串（带查找的字符串）一个一个字符进行比较。这么做我是一定可以得到正确结果的。</p><p>​    它的思路是这样的：先从第一个位置（主串），逐个比对，如果发现有一个不同，停止比对，从下一个位置继续逐个比对。一直循环下去，直到找到第一个匹配成功的，或者被查找的字符串（主串）到达末尾。示意图如下：</p><p><img src="https://www.helloimg.com/images/2021/05/22/Bf1pwn.gif" alt="字符串匹配的朴素实现"></p><p>​        然后就是我们的实现代码，这里给出C语言的：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">BF</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> len2<span class="token punctuation">)</span> <span class="token operator">?</span>  i<span class="token operator">-</span>j <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        怎么样，是不是很简单？恭喜你又掌握了一个技能！不过，这种算法的时间复杂度太高了。下次我们会讲另一种改进的模式匹配算法：KMP算法。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven的基础知识</title>
      <link href="/2021/03/20/Maven%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/03/20/Maven%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven的基础知识"><a href="#Maven的基础知识" class="headerlink" title="Maven的基础知识"></a>Maven的基础知识</h1><p>​    学完本章，你将掌握Maven的一些基础知识。</p><h3 id="一、-什么是Maven？"><a href="#一、-什么是Maven？" class="headerlink" title="一、 什么是Maven？"></a>一、 什么是Maven？</h3><blockquote><p>maven是一个项目构建和管理的工具，提供了帮助管理 构建、文档、报告、依赖、scms、发布、分发的方法。可以方便的编译代码、进行依赖管理、管理二进制库等等。<br>maven的好处在于可以将项目过程规范化、自动化、高效化以及强大的可扩展性。利用maven自身及其插件还可以获得代码检查报告、单元测试覆盖率、实现持续集成等等。@sirai</p></blockquote><h3 id="二、-Maven的安装及其环境变量配置"><a href="#二、-Maven的安装及其环境变量配置" class="headerlink" title="二、 Maven的安装及其环境变量配置"></a>二、 Maven的安装及其环境变量配置</h3><ol><li><p>安装：</p><p>进入 [Maven]: <a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a> 的下载页，选择<strong>Binary zip archive</strong>那一栏的。下载完毕后解压到工作目录下，即可。</p></li><li><p>环境变量配置：</p><ul><li><p>添加全局变量：</p><p>M2_HOME，值是你Maven解压的目录。</p></li><li><p>增加PATH中的内容：</p><p>在path末尾添加以下值：%M2_HOME%\bin;</p></li></ul></li><li><p>在cmd中输入 <strong>mvn help : system</strong></p><p>如果显示了<u>System Properties，Environment Variables</u> 两类信息，则Maven安装成功。</p></li></ol><h3 id="三、-Maven的安装目录"><a href="#三、-Maven的安装目录" class="headerlink" title="三、 Maven的安装目录"></a>三、 Maven的安装目录</h3><ul><li><p>bin：保存Maven的可执行命令。其中<strong>mvn</strong>和<strong>mvn.bat</strong>就是执行Maven工具的命令。</p></li><li><p>boot：该目录只包含一个名为：<strong>plexus-classworlds-2.6.0.jar</strong>的文件。plexus-classworlds是一个类加载器框架，与默认的Java类加载器 相比，它提供了更丰富的语法以方便配置，Maven使用该框架加载自己的类库。我们一般不用管这个文件。</p></li><li><p>conf：保存Maven配置文件的目录，该目录包含<strong>settings.xml</strong>文件，该文件用于设置Maven的全局行为。通常建议将该文件复制到                        用户目录/.m2/目录下，这样可以只设置当前用户的Maven行为。</p></li><li><p>lib：该目录包含所有Maven运行时需要的类库，Maven本身是分模块开发的，因此用户能看到诸如<strong>maven-core-3.6.2.jar</strong>、<strong>maven-reposito-metadata-3.6.2.jar</strong>等文件。此外，还包含Maven所依赖的第三方类库。</p></li><li><p>LICENSE、README.txt等说明性文档。</p></li></ul><h3 id="四、设置Maven"><a href="#四、设置Maven" class="headerlink" title="四、设置Maven"></a>四、设置Maven</h3><h4 id="1、设置Maven的两种方式："><a href="#1、设置Maven的两种方式：" class="headerlink" title="1、设置Maven的两种方式："></a>1、设置Maven的两种方式：</h4><ul><li>全局方式：通过Maven安装目录下的conf\settings.xml文件进行设置。</li><li>当前用户方式：通过当前用户Home目录的.m2\目录下的settings.xml文件进行设置。</li></ul><h4 id="2、可设置的参数："><a href="#2、可设置的参数：" class="headerlink" title="2、可设置的参数："></a>2、可设置的参数：</h4><ul><li>localRepository：该元素的内容是一个路径字符串，该路径字符串用于设置Maven的本地资源库路径。如果用户不设置该参数，Maven本地资源库默认保存在<strong>用户Home目录的.m2/repository</strong>路径下。可以改成其他位置，比如：E:\work\maven_repo，这样Maven会把所有插件都下载到E:\work\maven_repo目录下。</li><li>interactiveMode：该参数设置Maven是否处于交互模式——如果将Maven设为交互模式，每当Maven需要用户输入时，Maven都会提示用户输入。但如果将该参数设为false，那么Maven将不会提示用户输入，而是“智能”的使用默认值。</li><li>offline：该参数设置Maven是否处于离线状态。如果将该参数设置为false，那么当Maven找不到插件、依赖库时，总是会尝试从网络中下载。</li><li>proxies：该参数用于为Maven服务器设置代理服务器。可保护多个&lt;proxiy…/&gt;，每个可以设置一个代理服务器，包括代理服务器的ID、协议、代理服务器地址、代理服务器端口、用户名、密码等信息。</li><li>mirrors：该参数用于设置一系列Maven远程资源库镜像。</li></ul><h4 id="3、-下载插件"><a href="#3、-下载插件" class="headerlink" title="3、 下载插件"></a>3、 下载插件</h4><p>​    刚刚从官网下载好的Maven是空的，我们就要使用诸如：</p><pre><code>mvn install</code></pre><p>的命令，这个时候Maven会自动从远程资源库下载大部分核心Maven插件。</p><h3 id="五、Maven的约定"><a href="#五、Maven的约定" class="headerlink" title="五、Maven的约定"></a>五、Maven的约定</h3><ul><li><strong>源代码</strong>应该位于：${basedir}/scr/main/java 路径下。</li><li><strong>资源文件</strong>应该位于：${basedir}/scr/main/resources 路径下。</li><li><strong>测试代码</strong>应该位于：${basedir}/scr/test 路径下。</li><li>编译<strong>生成的class文件</strong>应该位于：${basedir}/target/classes  路径下。</li><li>项目应该会<strong>产生一个JAR文件</strong>，并将生成的JAR文件打包放在：${basedir}/target 路径下。</li></ul><h3 id="六、-Maven的生命周期"><a href="#六、-Maven的生命周期" class="headerlink" title="六、 Maven的生命周期"></a>六、 Maven的生命周期</h3><ol><li><p>Maven的生命周期是指Maven构建项目包含多个有序的阶段（phase），它可以支持许多不同的生命周期。</p></li><li><p>Maven生命周期中的元素被称为phase（阶段），每个生命周期有多个阶段组成，各阶段总是按顺序依次执行，Maven默认的生命周期的开始阶段是验证项目的基本完整性，结束阶段是将该项目发布到远程仓库。</p></li><li><p>Maven包含三个基本的生命周期：<strong>clean、default、site。</strong></p></li><li><p>Maven默认生命周期包含的核心阶段：</p><ul><li><strong>compile</strong>：编译项目。</li><li><strong>test</strong>：单元测试。</li><li><strong>package</strong>：项目打包。</li><li><strong>install</strong>：安装到本地仓库。</li><li><strong>deploy</strong>：部署到远程仓库。</li></ul></li></ol><h3 id="七、-Maven坐标"><a href="#七、-Maven坐标" class="headerlink" title="七、 Maven坐标"></a>七、 Maven坐标</h3><p>POM需要为项目提供一个唯一标识，这个标识就被称为Maven标识。Maven坐标由如下四个元素组成：</p><ul><li>groupId：该项目的开发者的标识名。</li><li>artifactId：指定项目名。</li><li>packaging：指定项目打包的类型。</li><li>version：指定项目的版本。</li></ul><h3 id="八、-Maven资源库"><a href="#八、-Maven资源库" class="headerlink" title="八、 Maven资源库"></a>八、 Maven资源库</h3><p>Maven资源库用于保存Maven插件，以及第三方框架。通常可分为以下三种：</p><ol><li>本地资源库；</li><li>远程资源库；</li><li>中央资源库（默认）</li></ol><p>当Maven需要使用某个插件或JAR包时，Maven搜索顺序是：<strong>本地资源库→远程资源库→中央资源库</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Java </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.5线性表</title>
      <link href="/2021/03/15/1.5%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2021/03/15/1.5%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>Hello，大家好，我是肖肖，欢迎大家来到“肖肖的数据结构讲堂”。今天我们不讲新的内容，而是补充一些之前没有讲过的东西，比如线性表的概念，特点，定义等等。本章将是一个愉快的章节。</p><hr><h3 id="一、-线性表的定义"><a href="#一、-线性表的定义" class="headerlink" title="一、 线性表的定义"></a>一、 线性表的定义</h3><p>​    到底什么是线性表呢？其实，线性表顾名思义，就是由n(n&gt;=0)个<strong>同一类型</strong>的数据元素构成的<strong>有限序列</strong>的<strong>线性</strong>结构。</p><p>​    其中呢，我们把n记为线性表的长度，表中的第一个元素叫做表头，表中的最后一个元素叫做表尾。如图所示：</p><p><img src="https://www.helloimg.com/images/2021/03/15/BNzIRz.png" alt="线性表示例"></p><p>a1即表头，a5即表尾。然后我们把目光移到a3，为什么呢？因为我们的新概念来啦——前驱和后继。a1，a2都是a3的前驱，a4，a5都是a3的后继。所谓前驱，可以简单的理解为是当前元素前面的元素，后继也是如此，当前元素后面的元素。其中还有两个特殊的前驱和后继，就是挨着a3的那两个元素，称为直接前驱和直接后继。</p><h3 id="二、线性表的特点"><a href="#二、线性表的特点" class="headerlink" title="二、线性表的特点"></a>二、线性表的特点</h3><p>​    我们观察上面的图片很容易发现，在一个线性表中有以下特点：</p><ul><li>存在唯一的一个被称作“第一个”的数据元素；</li><li>存在唯一的一个被称作“最后一个”的数据元素；</li><li>除了第一个外，结构中的每个数据元素均只有一个直接前驱；</li><li>除了最后一个外，结构中的每个数据元素均只有一个直接后继；</li></ul><h3 id="三、线性表的种类"><a href="#三、线性表的种类" class="headerlink" title="三、线性表的种类"></a>三、线性表的种类</h3><p>大致分为四种吧，顺序表、链表、栈、队列。</p><h3 id="四、作者的话"><a href="#四、作者的话" class="headerlink" title="四、作者的话"></a>四、作者的话</h3><p>​    可以看出这篇文章有点水，emmm。咕咕咕很久一段时间，导致现在不知道要这么写博客了。下次的链表我打算分为单链表和双链表两个部分，考虑到很多课本都没有循环链表的具体实现，下次的博文我会写上实现他们。谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类之System类</title>
      <link href="/2021/02/08/System/"/>
      <url>/2021/02/08/System/</url>
      
        <content type="html"><![CDATA[<h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1 常用方法"></a>1 常用方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//终止当前运行的Java虚拟机，非零表示异常终止。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回当前时间（以毫秒为单位）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span>Object src<span class="token punctuation">,</span> <span class="token keyword">int</span> srcPos<span class="token punctuation">,</span> Object dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token operator">:</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类之String类</title>
      <link href="/2021/02/08/String%E7%B1%BB/"/>
      <url>/2021/02/08/String%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本概述"><a href="#一、基本概述" class="headerlink" title="一、基本概述"></a>一、基本概述</h3><ul><li><p>字符串是常量，创建之后就不可改变（给字符串赋值时，并没有开辟修改数据，而是重新开辟空间）</p></li><li><p>字符串字面值存储在字符串池中，可以共享</p></li><li><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//产生一个对象，在字符串池中存储</span>String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//产生两个对象，堆、池各存储一个</span></code></pre></li></ul><h3 id="二、常用方法"><a href="#二、常用方法" class="headerlink" title="二、常用方法"></a>二、常用方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//返回字符串的长度</span><span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//根据下标获取字符</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//判断当前字符串中是否包含str</span><span class="token keyword">public</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//将字符串转换成数组</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//查找str首次出现的下标，存在，则返回该下标，否则返回-1</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//查找字符串在当前字符串中最后一次出现的下标索引</span><span class="token keyword">public</span> String <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//去掉字符串前后的空格</span><span class="token keyword">public</span> String <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//将小写转成大写</span><span class="token keyword">public</span> String <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//将大写转成小写</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">endWith</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//判断字符串是否以str结尾</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startWith</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//判断字符串是否以str开头</span><span class="token keyword">public</span> String <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span> <span class="token keyword">char</span> newChar<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//将旧字符串替换成新字符串</span><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//根据str做拆分</span></code></pre><h3 id="三、可变字符串"><a href="#三、可变字符串" class="headerlink" title="三、可变字符串"></a>三、可变字符串</h3><ul><li><p>StringBuffer: 可变长字符串，运行效率慢，线程安全</p></li><li><p>StringBuilder: 可变长字符串，运行效率快，线程不安全</p><pre class=" language-java"><code class="language-java"><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//追加字符串</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//添加</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//替换</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token comment" spellcheck="true">//删除</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类之包装类</title>
      <link href="/2021/02/08/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
      <url>/2021/02/08/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1-基本类型包装类的概述"><a href="#1-1-基本类型包装类的概述" class="headerlink" title="1.1 基本类型包装类的概述"></a>1.1 基本类型包装类的概述</h3><p>​    将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据常用的操作之一：用于基本数据类型与字符串之间的转换。</p><p>​    基本数据类型    包装类</p><p>​    byte                    Byte</p><p>​    short                  Short</p><p>​    int                        Integer</p><p>​    long                     Long</p><p>​    float                     Float</p><p>​    double                 Double</p><p>​    char                       Character</p><p>​    boolean                 Boolean</p><h3 id="1-2-Integer-类"><a href="#1-2-Integer-类" class="headerlink" title="1.2 Integer 类"></a>1.2 Integer 类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//返回表示指定int值的Integer实例</span><span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//返回一个保存指定值的Integer对象String</span></code></pre><h3 id="1-3-转换的一个例子（int-lt-—-gt-String"><a href="#1-3-转换的一个例子（int-lt-—-gt-String" class="headerlink" title="1.3 转换的一个例子（int <—-> String)"></a>1.3 转换的一个例子（int &lt;—-&gt; String)</h3><h5 id="①：int转换为String"><a href="#①：int转换为String" class="headerlink" title="①：int转换为String"></a>①：int转换为String</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回参数的字符串表示形式</span></code></pre><h5 id="②：String转换为int"><a href="#②：String转换为int" class="headerlink" title="②：String转换为int"></a>②：String转换为int</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将字符串解析为int类型。</span></code></pre><h3 id="1-4-自动装箱和拆箱"><a href="#1-4-自动装箱和拆箱" class="headerlink" title="1.4 自动装箱和拆箱"></a>1.4 自动装箱和拆箱</h3><h5 id="①：装箱"><a href="#①：装箱" class="headerlink" title="①：装箱"></a>①：装箱</h5><p>​        把基本数据类型转换为对应的包装类类型</p><h5 id="②：拆箱"><a href="#②：拆箱" class="headerlink" title="②：拆箱"></a>②：拆箱</h5><p>​        把包装类类型转换为对应的基本数据类型</p><h5 id="③：一个实例"><a href="#③：一个实例" class="headerlink" title="③：一个实例"></a>③：一个实例</h5><pre class=" language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//自动装箱  Integer i = Integer.valueOf(100);</span>i <span class="token operator">+=</span> <span class="token number">200</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//i = i + 200 自动装箱。 i + 200 自动拆箱： i.intValue() + 200;  </span></code></pre><h5 id="④：一个建议："><a href="#④：一个建议：" class="headerlink" title="④：一个建议："></a>④：一个建议：</h5><p>​        主要是对象，在使用前就必须进行不为null的判断。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类之 Object类</title>
      <link href="/2021/02/08/Object/"/>
      <url>/2021/02/08/Object/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Object类总述："><a href="#一、Object类总述：" class="headerlink" title="一、Object类总述："></a>一、Object类总述：</h3><ol><li><p>是所有类的父类。在Java中，如果一个类没有显式的继承另一个类，那么这个类默认继承了Object类。</p></li><li><p>Object类中的方法是所有对象都具有的方法。</p></li><li><p>Object类型可以存储任何对象。</p></li></ol><h3 id="二、方法："><a href="#二、方法：" class="headerlink" title="二、方法："></a>二、方法：</h3><h4 id="1-getClass"><a href="#1-getClass" class="headerlink" title="1. getClass():"></a>1. getClass():</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p>作用：返回引用中存储的实际对象类型。</p></blockquote><blockquote><p>应用：可以用于判断两个引用中实际存储对象类型是否一致。</p></blockquote><h4 id="2-hashCode"><a href="#2-hashCode" class="headerlink" title="2. hashCode():"></a>2. hashCode():</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p>作用：返回该对象的哈希码值。</p></blockquote><blockquote><p>哈希值：根据对象的地址或字符串或数字使用hash算法计算出来的int类型的数值。一般情况下，相同的对象返回相同的哈希码。</p></blockquote><h4 id="3-toString"><a href="#3-toString" class="headerlink" title="3. toString():"></a>3. toString():</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p>作用：返回该对象的字符串表示（表现形式），可以重写。</p></blockquote><h4 id="4-equals-："><a href="#4-equals-：" class="headerlink" title="4. equals()："></a>4. equals()：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p>默认实现为（this == obj），比较两个对象的地址是否相同，可以重写。</p></blockquote><ul><li><p>equals()方法的重写示例：</p><blockquote><ol><li>比较当前引用是否指向同一个对象；</li><li>判断obj是否为null；</li><li>判断两个引用指向的实际对象类型是否一致；</li><li>强类型转换；</li><li>依次比较各个属性值是否相同。</li></ol></blockquote></li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断是否是同一个对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断obj是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//判断他们的实际对象类型是否一致</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//强制类型转换</span>            Teacher t <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//依次比较各个属性是否相同</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">==</span> t<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="5-finalize"><a href="#5-finalize" class="headerlink" title="5. finalize():"></a>5. finalize():</h4><blockquote><p>当对象被判定为垃圾对象时，由JVM自动调用此方法，用以标记垃圾对象进入回收队列；</p></blockquote><blockquote><p>垃圾对象：没有有效引用指向此对象。</p><p>垃圾回收：由GC销毁垃圾对象，释放数据存储空间。</p><p>自动回收机制：JVM的内存耗尽，一次性回收所有垃圾对象。</p><p>手动回收机制：使用System.gc(); 通知JVM执行垃圾回收。（未定会执行）</p></blockquote><h3 id="三、补充："><a href="#三、补充：" class="headerlink" title="三、补充："></a>三、补充：</h3><h5 id="1-关于重写equals方法时判断实际类型类型比较时，getClass-方法与instanceof区别。"><a href="#1-关于重写equals方法时判断实际类型类型比较时，getClass-方法与instanceof区别。" class="headerlink" title="1.关于重写equals方法时判断实际类型类型比较时，getClass()方法与instanceof区别。"></a>1.关于重写equals方法时判断实际类型类型比较时，getClass()方法与instanceof区别。</h5><p>[]: <a href="https://www.cnblogs.com/1693977889zz/p/7089320.html">https://www.cnblogs.com/1693977889zz/p/7089320.html</a>    “Java重写equals方法（重点讲解）”</p><p>@<a href="https://home.cnblogs.com/u/1693977889zz/">江河湖泊</a></p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表</title>
      <link href="/2021/01/25/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
      <url>/2021/01/25/%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<hr><p>​    Hello,大家好，欢迎来到肖肖的数据结构讲堂，今天我们要来学习的是，线性表中的顺序表。</p><hr><h1 id="一、理论知识："><a href="#一、理论知识：" class="headerlink" title="一、理论知识："></a>一、理论知识：</h1><h4 id="1-你需要知道的知识："><a href="#1-你需要知道的知识：" class="headerlink" title="1.你需要知道的知识："></a>1.你需要知道的知识：</h4><ul><li>​        结构体</li><li>​        动态分配内存（malloc）</li><li>​        指针</li><li>​        typedef</li><li>​        宏定义</li></ul><h4 id="2-什么是顺序表？"><a href="#2-什么是顺序表？" class="headerlink" title="2.什么是顺序表？"></a>2.什么是顺序表？</h4><p>​        顺序表是线性表的一种，但它里面元素的存储时连续的，也就是说在内存中顺序表中的元素的<strong>地址</strong>是挨在一起的，这有点类似于一维数组，但是两者是有区别的。在C语言中，数组的大小不能动态改变，而顺序表的大小是可以”改变“的。</p><p>​        顺序表的创建代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ElementType <span class="token operator">*</span>array<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存放数据元素的数组.</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//顺序表的实际大小.</span>    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//顺序表的最大容量.</span><span class="token punctuation">}</span>SeqList<span class="token punctuation">;</span></code></pre><p>​        其中，ElementType是一个新的数据类型，它可以是int,float,char等等，还可以是自定义类型。下面是创建一个自定义类型（结构类型）的实例,为了后续的操作，我这里只在结构体里面只弄了一个整型变量，实际情况可以弄多个，而且还是不同类型的。也可以直接把基本数据类型的名字改成ElementType（typedef int ElementType;)。至于为什么弄成ElementType，这是<strong>为了规范</strong>，统一，方便交流。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    ...    */</span><span class="token punctuation">}</span>ElementType<span class="token punctuation">;</span></code></pre><p>​        定义好之后，我们就可以使用代码：</p><pre class=" language-c"><code class="language-c">SeqList <span class="token operator">*</span>L<span class="token punctuation">;</span></code></pre><p>来定义一个顺序表，因为我们的顺序表是一个SeqList类型的<strong>指针</strong>，所以我们可以用 <strong>-&gt;</strong> 来访问顺序表（结构体）中的元素：</p><pre class=" language-c"><code class="language-c">L<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>L<span class="token operator">-></span>length<span class="token punctuation">;</span></code></pre><p>​        我们也可以使用：</p><pre class=" language-c"><code class="language-c">SeqList L<span class="token punctuation">;</span></code></pre><p>来定义。如果是这样定义的话，就要用 <strong>.</strong> 运算符来访问顺序表中的数据（元素）。</p><pre class=" language-c"><code class="language-c">L<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre><p>​        在这里，还是建议使用第一种方法来定义，因为本文采取的是第一种方式，第二种方式，读者可以阅读本文后自行尝试。</p><h4 id="3-顺序表的API设计"><a href="#3-顺序表的API设计" class="headerlink" title="3.顺序表的API设计"></a>3.顺序表的API设计</h4><p>​        工作的时候，做一个项目前，都是先商量定义好API，再进行其它操作的，这里我们定义一些基本的顺序表的操作。</p><pre class=" language-c"><code class="language-c">SeqList <span class="token operator">*</span><span class="token function">cleateList</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span> 创建线性表。    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElementType <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> 获取线性表中第i个数据元素的值。    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">:</span> 查找线性表中与给定值 x 相等的数据元素。    <span class="token keyword">int</span> <span class="token function">insertList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">:</span> 在第i个位置插入数据元素x。    <span class="token keyword">int</span> <span class="token function">addList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">:</span> 在顺序表的最后增加一个数据元素。    <span class="token keyword">int</span> <span class="token function">deleteList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">:</span> 删除第i个位置的数据元素，并将它保存在x中。    <span class="token keyword">int</span> <span class="token function">DestoryList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span> 销毁一个线性表。    <span class="token keyword">int</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span> 清空一个线性表。    <span class="token keyword">void</span> <span class="token function">mergeList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>LA<span class="token punctuation">,</span> SeqList <span class="token operator">*</span>LB<span class="token punctuation">,</span> SeqList <span class="token operator">*</span>LC<span class="token punctuation">)</span><span class="token punctuation">:</span> 合并连个顺序表到第三个顺序表中。    <span class="token keyword">void</span> <span class="token function">outPutList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span> 输出线性表中的内容。</code></pre><hr><h1 id="二-顺序表基本操作的实现"><a href="#二-顺序表基本操作的实现" class="headerlink" title="二.顺序表基本操作的实现"></a>二.顺序表基本操作的实现</h1><h4 id="1-创建顺序表"><a href="#1-创建顺序表" class="headerlink" title="1.创建顺序表"></a>1.创建顺序表</h4><p>​    顺序表的创建，其实就是创建一个空的顺序表，我们在给顺序表分配内存空间后，需要把length的值置为。声明如下：</p><pre class=" language-c"><code class="language-c">SeqList <span class="token operator">*</span><span class="token function">cleateList</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    其中，capacity是这个顺序表的最大容量。我们可以使用语句：</p><pre class=" language-c"><code class="language-c">SeqList <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token function">cleateList</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>来创建一个最大容量为5的顺序表。它的示意图，如图所示：</p><p><img src="https://www.helloimg.com/images/2021/02/08/982f3a8027efbd1bf2ed8cccd7969ab1f4f9afc35e9d14f4.png" alt="空的顺序表示意图"></p><p>​    完整代码如下：</p><pre class=" language-c"><code class="language-c">SeqList <span class="token operator">*</span><span class="token function">cleateList</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>    SeqList <span class="token operator">*</span>L<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>SeqList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SeqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L<span class="token operator">-></span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    L<span class="token operator">-></span>array <span class="token operator">=</span> <span class="token punctuation">(</span>ElementType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>capacity <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样，我们就可以得到一个空的顺序表了，下面我们来讲如何在这个空的顺序表中增添数据元素。</p><h4 id="2-增加（插入）数据元素"><a href="#2-增加（插入）数据元素" class="headerlink" title="2.增加（插入）数据元素"></a>2.增加（插入）数据元素</h4><p>​    我们增加数据元素的方式有两种，一种是直接在当前顺序表的最后增加一个数据元素，另一种则是在指定位置增加数据元素。</p><p>​    对于第一种增加数据元素，我们只需要判断当前的顺序表是否满了就可以了，而另一种还需要找到第i个位置，移动后面的数据元素。具体算法如下：</p><p>​        （1) 判断顺序表的存储空间是否为满，若满，返回0；</p><p>​        （2）判断要增加（插入）的第i个位置是否是合法的（1≤ i ≤ n+1),若不合法，返回0；</p><p>​        （3）因为顺序表内数据元素的存储空间在内存中是挨在一起的，因此要将i以后的元素全部往后移一下，即腾出第i个位置。</p><p>​        （4）将带添加的数据元素x存储到第i个位置中；</p><p>​        （5）修改顺序表中length的值，让其+1。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">insertList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">==</span> L<span class="token operator">-></span>capacity<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断顺序表是否为满。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断顺序表带插入的数据元素的位置是否合法。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> L<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//将第i个元素以后的所有元素都往后挪一个位置。</span>        L<span class="token operator">-></span>array<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意第i个元素它的下标其实是i-1。</span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//顺序表的长度增加1。</span><span class="token punctuation">}</span></code></pre><p>​        对于直接在顺序表后面增加元素就相对简单了，只要先判断顺序表是否满了，再把这个数据元素加到顺序表的最后，然后length+1即可实现。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">addList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">==</span> L<span class="token operator">-></span>capacity<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断顺序表是否满了。</span>        L<span class="token operator">-></span>array<span class="token punctuation">[</span>L<span class="token operator">-></span>length<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把这个数据元素添加到顺序表的末尾。</span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//顺序表长度+1。</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    现在，我们学会了如何增加数据元素，那么当我们想输出这些数据元素，要怎么做呢？</p><h4 id="3-输出顺序表中的数据元素"><a href="#3-输出顺序表中的数据元素" class="headerlink" title="3.输出顺序表中的数据元素"></a>3.输出顺序表中的数据元素</h4><p>​    具体代码 ：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">outPutList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> L<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    注意，这里把它当成输出数组元素，我前面定义的结构变量里面是一个整型的a，使用这里我用了 array[i].a 来访问数据元素的内容。</p><h4 id="4-测试1！"><a href="#4-测试1！" class="headerlink" title="4.测试1！"></a>4.测试1！</h4><p>​    我们在前面学习了在顺序表中增加数据元素和输出数据元素的函数，但是我们不知道自己写的函数是否是正确的，所以，现在就让肖肖来带着你来测试一把吧！下面是含增加数据元素、输出顺序表内容、主函数的完整程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span>ElementType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElementType <span class="token operator">*</span>array<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span><span class="token punctuation">}</span>SeqList<span class="token punctuation">;</span>SeqList <span class="token operator">*</span><span class="token function">cleateList</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">addList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">insertList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">outPutList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SeqList <span class="token operator">*</span>L<span class="token punctuation">;</span>    ElementType x<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>        L <span class="token operator">=</span> <span class="token function">cleateList</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insertList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">outPutList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SeqList <span class="token operator">*</span><span class="token function">cleateList</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>    SeqList <span class="token operator">*</span>L<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>SeqList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SeqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L<span class="token operator">-></span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    L<span class="token operator">-></span>array <span class="token operator">=</span> <span class="token punctuation">(</span>ElementType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>capacity <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">addList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">==</span> L<span class="token operator">-></span>capacity<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        L<span class="token operator">-></span>array<span class="token punctuation">[</span>L<span class="token operator">-></span>length<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">insertList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">==</span> L<span class="token operator">-></span>capacity<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> L<span class="token operator">-></span>length<span class="token number">-1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        L<span class="token operator">-></span>array<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">outPutList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> L<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    控制台输入:  1 2</p><p>​    输出： 1 2</p><p>​    由此可见，函数正确！然而，如果我们只是往这个表中添加数据元素，而无法得到里面的数据元素，我们就无法对这个表中数据进行一系列的操作，那么我们该如何得到（查找）顺序表中的数据元素呢？</p><h4 id="5-得到、查找数据元素"><a href="#5-得到、查找数据元素" class="headerlink" title="5.得到、查找数据元素"></a>5.得到、查找数据元素</h4><p>​    既然我们学会了如何添加元素到顺序表，我们理所当然的要知道如何得到顺序表中的数据元素。顺序表的查找，获取数据元素其实和简单，基本上与一维数组的类似，获得数据元素的代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElementTypr <span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token operator">*</span>x <span class="token operator">=</span> L<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>值得注意的是，顺序表中的第i个元素，它的下标其实是i-1。我们最先判断要取的位置的是否合理，如果是不合理的，我们为什么还要去返回数据呢？查找的操作是查找我们给定的数据是否在顺序表中，然后返回它的位置，如果没有找到，那么返回-1，代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token operator">-></span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> L<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>因为顺序表是一个带有数组的结构，如果我们把它当成函数的参数传入会浪费空间，所以我们这里传入的是指向这个顺序表的指针。</p><p>若是我不想要一些数据元素要怎么办，或者，我干脆不要这个顺序表了，我们该如何实现呢？别急，带我慢慢述说。</p><h4 id="6-删除，清空，销毁！"><a href="#6-删除，清空，销毁！" class="headerlink" title="6.删除，清空，销毁！"></a>6.删除，清空，销毁！</h4><h5 id="1-gt-删除第i个数据元素。"><a href="#1-gt-删除第i个数据元素。" class="headerlink" title="1> 删除第i个数据元素。"></a>1&gt; 删除第i个数据元素。</h5><p>​    首先要说一下，删除的原理：</p><p>​    （1）判断删除位置i是否合法（1≤ i ≤ n），若不合法，则返回0。</p><p>​    （2）将i-1到n位置的数据元素依次往前移动一位。当 i == n 时，无需移动。</p><p>​    （3）修改length，使得表长减1。</p><p>具体代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">deleteList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElementType x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">*</span>x <span class="token operator">=</span> L<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        L<span class="token operator">-></span>array<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    我们怎么操作，是把前面的数据元素被后面的覆盖掉，其实之前的 L-&gt;length 位置的那个数据元素还是存在的，我们可能通过找到它的地址，通过它的地址来访问它里面的数据，不过我们的查找，得到数据元素的函数中，有如下判断：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>我们的查找、获取函数都只能去找这个范围内的，其他地方呢，我们是访问不到的，所以可以“认为”那个数据元素不见了。</p><h5 id="2-gt-清空顺序表"><a href="#2-gt-清空顺序表" class="headerlink" title="2> 清空顺序表"></a>2&gt; 清空顺序表</h5><p>​    我们要理解清空顺序表，我们应该先明白，计算机删除数据的原理，我们想想，当我们创建了一个包含“123”的txt文件，然后右键把它删除后，计算机是如何删除的，是像现实生活中的那样，扔掉？不不不，如果计算机是这样，那么你的硬盘和软盘岂不是要年年更换？计算机删除数据的原理就是把另外一些数据覆盖掉你写的数据上面，或者干脆不是它自己覆盖的，而是做上标记，让你不能读取数据，但是可以修改数据，待你下一次写入数据时，再把原来的数据覆盖掉。<del>（非专业解释，想了解清楚，请自行百度）</del></p><p>​    我们的清空顺序表的操作也是如此，只是对访问做出限制，然后等待被新的数据元素覆盖掉。代码实现：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        L<span class="token operator">-></span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    L-&gt;array 用来判断顺序表中是否有数据元素，如果没有，我们就没有必要对它进行清空操作了。随后我们只需要把顺序表的实际长度length置为0，就可以认为这个顺序表已经被我们清空了。</p><h5 id="3-gt-销毁顺序表"><a href="#3-gt-销毁顺序表" class="headerlink" title="3> 销毁顺序表"></a>3&gt; 销毁顺序表</h5><p>​    销毁？清空？听起来相同的两个词汇，其实差距挺大的。销毁顺序表，就是说，我不要这个顺序表了，这个顺序表从内存中消失了，就算通过指针来访问，访问到的也是无意义的数据。而清空顺序表呢？仅仅把顺序表里面的旧数据元素不要了，这个顺序表还是存在的，我们可以对这个顺序表进行增加数据元素的操作。</p><p>​    所以，当我们进行销毁顺序表的操作时，我们要注意释放内存（因为我们之前给顺序表、存放数据元素的数组分配了内存），同时把顺序表的实际大小，最大容量都改为0。具体代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">DestoryList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>L<span class="token operator">-></span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        L<span class="token operator">-></span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        L<span class="token operator">-></span>capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顺序表销毁成功！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顺序表销毁失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-合并顺序表"><a href="#7-合并顺序表" class="headerlink" title="7.合并顺序表"></a>7.合并顺序表</h4><p>​    前面我们把顺序表的基础操作学完了，现在我们来学习一个难一点的，合并两个有序顺序表，要求合并后的顺序表还是有序的。这个还是挺简单的，我们先设置三个指针分别指向每一个顺序表的元素，然后比较需要合并的两个顺序表中指针指向的数据元素的大小，然后把其插入到新表即可，具体算法：</p><p>​    （1）设表LC是一个空表，为使LC也是一个有序的顺序表，设置三个指针i，j，k分别指向三个顺序表中的数据元素。</p><p>​    （2）若LA-&gt;array[i] &lt;= LB-&gt;array[j]，则将LA-&gt;array[i] 插入到表LC中。</p><p>​    （3）重复操作步骤（2），直到一个表被扫描完毕为止。</p><p>​    （4）再将为扫描完的表中的剩余的所有元素放到表LC中。</p><p>具体代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">mergeList</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>LA<span class="token punctuation">,</span> SeqList <span class="token operator">*</span>LB<span class="token punctuation">,</span> SeqList <span class="token operator">*</span>LC<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    i <span class="token operator">=</span> j <span class="token operator">=</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LC<span class="token operator">-></span>capacity <span class="token operator">&lt;</span> LA<span class="token operator">-></span>length <span class="token operator">+</span> LB<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"表LC容量不够！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> LA<span class="token operator">-></span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> LB<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LA<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> LB<span class="token operator">-></span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LC<span class="token operator">-></span>array<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> LA<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            LC<span class="token operator">-></span>array<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> LB<span class="token operator">-></span>array<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> LA<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LC<span class="token operator">-></span>array<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> LA<span class="token operator">-></span>array<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> LB<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LC<span class="token operator">-></span>array<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> LB<span class="token operator">-></span>array<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        LC<span class="token operator">-></span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="三、作者的话"><a href="#三、作者的话" class="headerlink" title="三、作者的话"></a>三、作者的话</h1><p>​    到这里，我们的顺序表已经学完了。可以看到，顺序表并不是很难，只要原理记清楚，多敲几次就可以记住。下一节的链表，难度大一点，因为指针用得多，容易乱吧！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的一年，新的梦想</title>
      <link href="/2021/01/01/%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4%EF%BC%8C%E8%A6%81%E5%B9%B2%E4%BA%9B%E4%BB%80%E4%B9%88%E5%91%A2%EF%BC%9F/"/>
      <url>/2021/01/01/%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4%EF%BC%8C%E8%A6%81%E5%B9%B2%E4%BA%9B%E4%BB%80%E4%B9%88%E5%91%A2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>​    2020年马上就要结束了，想想就有点刺激，回忆2020年，还是真的难以忘却，疫情，高考，上大学。说实话，很愉快也很艰难。人以18，不能像以前那么幼稚了，也差不多要融入社会了。</p><p>​    也不多说什么，就谈谈目标什么的吧，其实说其他的用处可能不大，而且会越扯越偏，中学阶段练就的水字大法不是白吹的。</p><p>​    到目前为止，我学了JavaSE，感觉不是很扎实，还是要认真的学，然后记笔记，多敲项目，还有就是学得快，忘得快，必须要去复习，总结。下一步大概就是网络编程，才算进入到编程世界吧。</p><p>​    下面就是2021年的目标：</p><p>​        ①：写一个中国象棋的软件。</p><p>​        ②：使用Java、MySQL，写一两个学生管理系统。</p><p>​        ③：写一堆MC的插件（Nukkit）的。</p><p>​        ④：组建一个编程团队。</p><p>​        ⑤：写十篇以上的技术博客。</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"元旦快乐！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Autobiography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/2020/12/27/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
      <url>/2020/12/27/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
      
        <content type="html"><![CDATA[<p>本人大一，爱好编程、下棋。学过Java，但没有深入，以前学的时候没做笔记、也没有刷题。现在就读计算机科学与技术专业，是一个小菜鸟，没有参加新生赛，因为是认为自己不是很适合搞算法比赛，我喜欢的是写程序，写项目，写一个有功能的，可以看到效果的东西。现在又差不多把JavaSE学一遍了，很想写一个项目，软件，或者游戏什么的。哈哈哈哈，然后在小破站看到了一个中国象棋的程序设计实验，决定在寒假的时候写一个出来。</p><p>我有一个群的群主，大二出去实习，很佩服他，他也是高考后学的Java。</p><p>由于本人知识有限，很多不是很准确，希望个位大佬可以指出。还有我的QQ号是：3561644867，期待与你的交流。</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Autobiography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/12/27/hello-world/"/>
      <url>/2020/12/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
